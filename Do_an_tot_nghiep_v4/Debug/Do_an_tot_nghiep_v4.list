
Do_an_tot_nghiep_v4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002587c  08005ba8  08005ba8  00015ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802b424  0802b424  0004000c  2**0
                  CONTENTS
  4 .ARM          00000008  0802b424  0802b424  0003b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802b42c  0802b42c  0004000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802b42c  0802b42c  0003b42c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802b430  0802b430  0003b430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0802b434  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004000c  2**0
                  CONTENTS
 10 .bss          000001d4  2000000c  2000000c  0004000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  0004000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000147c0  00000000  00000000  0004003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d55  00000000  00000000  000547fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00057558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  000585c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232f9  00000000  00000000  00059568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ba4  00000000  00000000  0007c861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d024e  00000000  00000000  00092405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00162653  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044c4  00000000  00000000  001626a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b90 	.word	0x08005b90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005b90 	.word	0x08005b90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <convRGB565>:
#include "stm32f4xx_hal.h"
#include "lcdIli9341.h"
#include "lcdIli9341Config.h"

uint16_t convRGB565(unsigned char lowByte, unsigned char highByte)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4603      	mov	r3, r0
 80004c8:	460a      	mov	r2, r1
 80004ca:	71fb      	strb	r3, [r7, #7]
 80004cc:	4613      	mov	r3, r2
 80004ce:	71bb      	strb	r3, [r7, #6]
  uint8_t dataHigh = highByte ;
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	73fb      	strb	r3, [r7, #15]
  uint8_t dataLow = lowByte;
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	73bb      	strb	r3, [r7, #14]
  uint16_t data=dataHigh<< 8 | dataLow;
 80004d8:	7bfb      	ldrb	r3, [r7, #15]
 80004da:	021b      	lsls	r3, r3, #8
 80004dc:	b21a      	sxth	r2, r3
 80004de:	7bbb      	ldrb	r3, [r7, #14]
 80004e0:	b21b      	sxth	r3, r3
 80004e2:	4313      	orrs	r3, r2
 80004e4:	b21b      	sxth	r3, r3
 80004e6:	81bb      	strh	r3, [r7, #12]
 //uint16_t data = dataLow<< 8 | dataHigh;
  return data;
 80004e8:	89bb      	ldrh	r3, [r7, #12]
}
 80004ea:	4618      	mov	r0, r3
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr

080004f6 <RGB_Image>:



RET RGB_Image(unsigned char *p_buffer, uint32_t lenght)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b086      	sub	sp, #24
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
	uint16_t* p_lcdData;
	uint32_t n=0;
 8000500:	2300      	movs	r3, #0
 8000502:	617b      	str	r3, [r7, #20]
	lcdIli9341_setArea(0, 0, LCD_ILI9341_WIDTH - 1, LCD_ILI9341_HEIGHT - 1);
 8000504:	23ef      	movs	r3, #239	; 0xef
 8000506:	f240 123f 	movw	r2, #319	; 0x13f
 800050a:	2100      	movs	r1, #0
 800050c:	2000      	movs	r0, #0
 800050e:	f000 fa06 	bl	800091e <lcdIli9341_setArea>
	p_lcdData=lcdIli9341_getDrawAddress();
 8000512:	f000 fa8f 	bl	8000a34 <lcdIli9341_getDrawAddress>
 8000516:	60f8      	str	r0, [r7, #12]
		  for(uint16_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 8000518:	2300      	movs	r3, #0
 800051a:	827b      	strh	r3, [r7, #18]
 800051c:	e035      	b.n	800058a <RGB_Image+0x94>
		  	  for(uint16_t x = 0; x < LCD_ILI9341_WIDTH/2; x++){
 800051e:	2300      	movs	r3, #0
 8000520:	823b      	strh	r3, [r7, #16]
 8000522:	e02a      	b.n	800057a <RGB_Image+0x84>
		  		  uint16_t lcdData = convRGB565(*(p_buffer + (LCD_ILI9341_WIDTH*y) + 2*x), *(p_buffer + (LCD_ILI9341_WIDTH*y) +2*x + 1));
 8000524:	8a7a      	ldrh	r2, [r7, #18]
 8000526:	4613      	mov	r3, r2
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	4413      	add	r3, r2
 800052c:	019b      	lsls	r3, r3, #6
 800052e:	461a      	mov	r2, r3
 8000530:	8a3b      	ldrh	r3, [r7, #16]
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	4413      	add	r3, r2
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	7818      	ldrb	r0, [r3, #0]
 800053c:	8a7a      	ldrh	r2, [r7, #18]
 800053e:	4613      	mov	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	4413      	add	r3, r2
 8000544:	019b      	lsls	r3, r3, #6
 8000546:	461a      	mov	r2, r3
 8000548:	8a3b      	ldrh	r3, [r7, #16]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	3301      	adds	r3, #1
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	4413      	add	r3, r2
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	4619      	mov	r1, r3
 8000558:	f7ff ffb2 	bl	80004c0 <convRGB565>
 800055c:	4603      	mov	r3, r0
 800055e:	817b      	strh	r3, [r7, #10]
		  		 *p_lcdData = lcdData;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	897a      	ldrh	r2, [r7, #10]
 8000564:	801a      	strh	r2, [r3, #0]
		  		 n++;
 8000566:	697b      	ldr	r3, [r7, #20]
 8000568:	3301      	adds	r3, #1
 800056a:	617b      	str	r3, [r7, #20]
		  		 if(n>lenght) break;
 800056c:	697a      	ldr	r2, [r7, #20]
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	429a      	cmp	r2, r3
 8000572:	d806      	bhi.n	8000582 <RGB_Image+0x8c>
		  	  for(uint16_t x = 0; x < LCD_ILI9341_WIDTH/2; x++){
 8000574:	8a3b      	ldrh	r3, [r7, #16]
 8000576:	3301      	adds	r3, #1
 8000578:	823b      	strh	r3, [r7, #16]
 800057a:	8a3b      	ldrh	r3, [r7, #16]
 800057c:	2b9f      	cmp	r3, #159	; 0x9f
 800057e:	d9d1      	bls.n	8000524 <RGB_Image+0x2e>
 8000580:	e000      	b.n	8000584 <RGB_Image+0x8e>
		  		 if(n>lenght) break;
 8000582:	bf00      	nop
		  for(uint16_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 8000584:	8a7b      	ldrh	r3, [r7, #18]
 8000586:	3301      	adds	r3, #1
 8000588:	827b      	strh	r3, [r7, #18]
 800058a:	8a7b      	ldrh	r3, [r7, #18]
 800058c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000590:	d3c5      	bcc.n	800051e <RGB_Image+0x28>
		  	  	  }
	 return HAL_OK;
 8000592:	2300      	movs	r3, #0
}
 8000594:	4618      	mov	r0, r3
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <Gray32_Image>:
		  	  }
		    }
	return HAL_OK;
}
RET Gray32_Image(unsigned char *p_buffer, uint32_t lenght)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b08a      	sub	sp, #40	; 0x28
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
	uint32_t check=0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t graypixel=0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	847b      	strh	r3, [r7, #34]	; 0x22
	lcdIli9341_setArea(0, 0, LCD_ILI9341_WIDTH - 1, LCD_ILI9341_HEIGHT - 1);
 80005ae:	23ef      	movs	r3, #239	; 0xef
 80005b0:	f240 123f 	movw	r2, #319	; 0x13f
 80005b4:	2100      	movs	r1, #0
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 f9b1 	bl	800091e <lcdIli9341_setArea>
	uint16_t* p_lcdData=lcdIli9341_getDrawAddress();
 80005bc:	f000 fa3a 	bl	8000a34 <lcdIli9341_getDrawAddress>
 80005c0:	6178      	str	r0, [r7, #20]
	for(uint32_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
 80005c6:	e05e      	b.n	8000686 <Gray32_Image+0xea>
			    {
			  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH/2; x++)
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
 80005cc:	e053      	b.n	8000676 <Gray32_Image+0xda>
			  	  {
			  		  graypixel=convRGB565(*(p_buffer + (LCD_ILI9341_WIDTH*y) + 2*x), *(p_buffer + (LCD_ILI9341_WIDTH*y) +2*x + 1));
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	4613      	mov	r3, r2
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	015b      	lsls	r3, r3, #5
 80005d8:	461a      	mov	r2, r3
 80005da:	69bb      	ldr	r3, [r7, #24]
 80005dc:	4413      	add	r3, r2
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	4413      	add	r3, r2
 80005e4:	7818      	ldrb	r0, [r3, #0]
 80005e6:	69fa      	ldr	r2, [r7, #28]
 80005e8:	4613      	mov	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	015b      	lsls	r3, r3, #5
 80005f0:	461a      	mov	r2, r3
 80005f2:	69bb      	ldr	r3, [r7, #24]
 80005f4:	4413      	add	r3, r2
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	3301      	adds	r3, #1
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f7ff ff5d 	bl	80004c0 <convRGB565>
 8000606:	4603      	mov	r3, r0
 8000608:	847b      	strh	r3, [r7, #34]	; 0x22

			  		  uint16_t r = graypixel>>11;
 800060a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800060c:	0adb      	lsrs	r3, r3, #11
 800060e:	827b      	strh	r3, [r7, #18]
			  		  uint16_t g = (graypixel &  LCD_ILI9341_COLOR_GREEN)>>5;
 8000610:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000612:	115b      	asrs	r3, r3, #5
 8000614:	b29b      	uxth	r3, r3
 8000616:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800061a:	823b      	strh	r3, [r7, #16]
			  		  uint16_t b =graypixel & LCD_ILI9341_COLOR_BLUE;
 800061c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800061e:	f003 031f 	and.w	r3, r3, #31
 8000622:	81fb      	strh	r3, [r7, #14]
			  		  if(graypixel!=0xffff)
 8000624:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800062a:	4293      	cmp	r3, r2
 800062c:	d016      	beq.n	800065c <Gray32_Image+0xc0>
			  		  {
			  			  graypixel = (r+ g*(32/64) +b)/3;
 800062e:	8a7a      	ldrh	r2, [r7, #18]
 8000630:	89fb      	ldrh	r3, [r7, #14]
 8000632:	4413      	add	r3, r2
 8000634:	4a18      	ldr	r2, [pc, #96]	; (8000698 <Gray32_Image+0xfc>)
 8000636:	fb82 1203 	smull	r1, r2, r2, r3
 800063a:	17db      	asrs	r3, r3, #31
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	847b      	strh	r3, [r7, #34]	; 0x22
			  			  graypixel = ((graypixel)<<11)|((graypixel*(64/32))<<5)|((graypixel)>>0) ;
 8000640:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000642:	02db      	lsls	r3, r3, #11
 8000644:	b21a      	sxth	r2, r3
 8000646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	015b      	lsls	r3, r3, #5
 800064c:	b21b      	sxth	r3, r3
 800064e:	4313      	orrs	r3, r2
 8000650:	b21a      	sxth	r2, r3
 8000652:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000656:	4313      	orrs	r3, r2
 8000658:	b21b      	sxth	r3, r3
 800065a:	847b      	strh	r3, [r7, #34]	; 0x22
			  		  }
			  		  *p_lcdData = graypixel;
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000660:	801a      	strh	r2, [r3, #0]
			  		  check = check +2;
 8000662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000664:	3302      	adds	r3, #2
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
			  		  if(check>=153600) break;
 8000668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800066a:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 800066e:	d206      	bcs.n	800067e <Gray32_Image+0xe2>
			  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH/2; x++)
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	3301      	adds	r3, #1
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	2b9f      	cmp	r3, #159	; 0x9f
 800067a:	d9a8      	bls.n	80005ce <Gray32_Image+0x32>
 800067c:	e000      	b.n	8000680 <Gray32_Image+0xe4>
			  		  if(check>=153600) break;
 800067e:	bf00      	nop
	for(uint32_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	3301      	adds	r3, #1
 8000684:	61fb      	str	r3, [r7, #28]
 8000686:	69fb      	ldr	r3, [r7, #28]
 8000688:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800068c:	d39c      	bcc.n	80005c8 <Gray32_Image+0x2c>
			  	  	  }
			    }
	return HAL_OK;
 800068e:	2300      	movs	r3, #0

}
 8000690:	4618      	mov	r0, r3
 8000692:	3728      	adds	r7, #40	; 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	55555556 	.word	0x55555556

0800069c <Negative_Image>:

RET Negative_Image(unsigned char *p_buffer, uint32_t lenght)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	uint32_t check=0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
		uint16_t negpixel=0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	837b      	strh	r3, [r7, #26]
		lcdIli9341_setArea(0, 0, LCD_ILI9341_WIDTH - 1, LCD_ILI9341_HEIGHT - 1);
 80006ae:	23ef      	movs	r3, #239	; 0xef
 80006b0:	f240 123f 	movw	r2, #319	; 0x13f
 80006b4:	2100      	movs	r1, #0
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 f931 	bl	800091e <lcdIli9341_setArea>
		uint16_t* p_lcdData=lcdIli9341_getDrawAddress();
 80006bc:	f000 f9ba 	bl	8000a34 <lcdIli9341_getDrawAddress>
 80006c0:	6178      	str	r0, [r7, #20]
		for(uint32_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 80006c2:	2300      	movs	r3, #0
 80006c4:	623b      	str	r3, [r7, #32]
 80006c6:	e056      	b.n	8000776 <Negative_Image+0xda>

				  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH/2; x++)
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	e04b      	b.n	8000766 <Negative_Image+0xca>
				  	  {
				  		  negpixel=convRGB565(*(p_buffer + (LCD_ILI9341_WIDTH*y) + 2*x), *(p_buffer + (LCD_ILI9341_WIDTH*y) +2*x + 1));
 80006ce:	6a3a      	ldr	r2, [r7, #32]
 80006d0:	4613      	mov	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4413      	add	r3, r2
 80006d6:	015b      	lsls	r3, r3, #5
 80006d8:	461a      	mov	r2, r3
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	4413      	add	r3, r2
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	4413      	add	r3, r2
 80006e4:	7818      	ldrb	r0, [r3, #0]
 80006e6:	6a3a      	ldr	r2, [r7, #32]
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	015b      	lsls	r3, r3, #5
 80006f0:	461a      	mov	r2, r3
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	3301      	adds	r3, #1
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	4619      	mov	r1, r3
 8000702:	f7ff fedd 	bl	80004c0 <convRGB565>
 8000706:	4603      	mov	r3, r0
 8000708:	837b      	strh	r3, [r7, #26]

				  		  uint16_t r = negpixel>>11;
 800070a:	8b7b      	ldrh	r3, [r7, #26]
 800070c:	0adb      	lsrs	r3, r3, #11
 800070e:	827b      	strh	r3, [r7, #18]
				  		  uint16_t g = (negpixel &  LCD_ILI9341_COLOR_GREEN)>>5;
 8000710:	8b7b      	ldrh	r3, [r7, #26]
 8000712:	115b      	asrs	r3, r3, #5
 8000714:	b29b      	uxth	r3, r3
 8000716:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800071a:	823b      	strh	r3, [r7, #16]
				  		  uint16_t b =negpixel & LCD_ILI9341_COLOR_BLUE;
 800071c:	8b7b      	ldrh	r3, [r7, #26]
 800071e:	f003 031f 	and.w	r3, r3, #31
 8000722:	81fb      	strh	r3, [r7, #14]
				  		   negpixel = ((0x1f-r)<<11)|((0x3f-g)<<5)|((0x1f-b)>>0) ;
 8000724:	8a7b      	ldrh	r3, [r7, #18]
 8000726:	f1c3 031f 	rsb	r3, r3, #31
 800072a:	02db      	lsls	r3, r3, #11
 800072c:	b21a      	sxth	r2, r3
 800072e:	8a3b      	ldrh	r3, [r7, #16]
 8000730:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000734:	015b      	lsls	r3, r3, #5
 8000736:	b21b      	sxth	r3, r3
 8000738:	4313      	orrs	r3, r2
 800073a:	b21a      	sxth	r2, r3
 800073c:	89fb      	ldrh	r3, [r7, #14]
 800073e:	f1c3 031f 	rsb	r3, r3, #31
 8000742:	b29b      	uxth	r3, r3
 8000744:	b21b      	sxth	r3, r3
 8000746:	4313      	orrs	r3, r2
 8000748:	b21b      	sxth	r3, r3
 800074a:	837b      	strh	r3, [r7, #26]
				  		  *p_lcdData = negpixel;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	8b7a      	ldrh	r2, [r7, #26]
 8000750:	801a      	strh	r2, [r3, #0]
				  		  check = check +2;
 8000752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000754:	3302      	adds	r3, #2
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
				  		  if(check>=153600) break;
 8000758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800075a:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 800075e:	d206      	bcs.n	800076e <Negative_Image+0xd2>
				  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH/2; x++)
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	3301      	adds	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	2b9f      	cmp	r3, #159	; 0x9f
 800076a:	d9b0      	bls.n	80006ce <Negative_Image+0x32>
 800076c:	e000      	b.n	8000770 <Negative_Image+0xd4>
				  		  if(check>=153600) break;
 800076e:	bf00      	nop
		for(uint32_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 8000770:	6a3b      	ldr	r3, [r7, #32]
 8000772:	3301      	adds	r3, #1
 8000774:	623b      	str	r3, [r7, #32]
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800077c:	d3a4      	bcc.n	80006c8 <Negative_Image+0x2c>
				  	  }
		return HAL_OK;
 800077e:	2300      	movs	r3, #0
}
 8000780:	4618      	mov	r0, r3
 8000782:	3728      	adds	r7, #40	; 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <Bin_Image>:

RET Bin_Image(unsigned char *p_buffer, uint32_t lenght)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
		 uint16_t thress = 12;
 8000792:	230c      	movs	r3, #12
 8000794:	82fb      	strh	r3, [r7, #22]
		uint32_t check=0;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
		uint16_t graypixel=0;
 800079a:	2300      	movs	r3, #0
 800079c:	82bb      	strh	r3, [r7, #20]
		uint16_t binpixel=0;
 800079e:	2300      	movs	r3, #0
 80007a0:	847b      	strh	r3, [r7, #34]	; 0x22
		lcdIli9341_setArea(0, 0, LCD_ILI9341_WIDTH - 1, LCD_ILI9341_HEIGHT - 1);
 80007a2:	23ef      	movs	r3, #239	; 0xef
 80007a4:	f240 123f 	movw	r2, #319	; 0x13f
 80007a8:	2100      	movs	r1, #0
 80007aa:	2000      	movs	r0, #0
 80007ac:	f000 f8b7 	bl	800091e <lcdIli9341_setArea>
		uint16_t* p_lcdData=lcdIli9341_getDrawAddress();
 80007b0:	f000 f940 	bl	8000a34 <lcdIli9341_getDrawAddress>
 80007b4:	6138      	str	r0, [r7, #16]
		for(uint32_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	e058      	b.n	800086e <Bin_Image+0xe6>

				  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH/2; x++)
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]
 80007c0:	e04d      	b.n	800085e <Bin_Image+0xd6>
				  	  	  {
				  		  graypixel=convRGB565(*(p_buffer + (LCD_ILI9341_WIDTH*y) + 2*x), *(p_buffer + (LCD_ILI9341_WIDTH*y) +2*x + 1));
 80007c2:	69fa      	ldr	r2, [r7, #28]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	015b      	lsls	r3, r3, #5
 80007cc:	461a      	mov	r2, r3
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	4413      	add	r3, r2
 80007d2:	005b      	lsls	r3, r3, #1
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	4413      	add	r3, r2
 80007d8:	7818      	ldrb	r0, [r3, #0]
 80007da:	69fa      	ldr	r2, [r7, #28]
 80007dc:	4613      	mov	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4413      	add	r3, r2
 80007e2:	015b      	lsls	r3, r3, #5
 80007e4:	461a      	mov	r2, r3
 80007e6:	69bb      	ldr	r3, [r7, #24]
 80007e8:	4413      	add	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	3301      	adds	r3, #1
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	4619      	mov	r1, r3
 80007f6:	f7ff fe63 	bl	80004c0 <convRGB565>
 80007fa:	4603      	mov	r3, r0
 80007fc:	82bb      	strh	r3, [r7, #20]

				  		  uint16_t r = graypixel>>11;
 80007fe:	8abb      	ldrh	r3, [r7, #20]
 8000800:	0adb      	lsrs	r3, r3, #11
 8000802:	81fb      	strh	r3, [r7, #14]
				  		  uint16_t g = (graypixel &  LCD_ILI9341_COLOR_GREEN)>>5;
 8000804:	8abb      	ldrh	r3, [r7, #20]
 8000806:	115b      	asrs	r3, r3, #5
 8000808:	b29b      	uxth	r3, r3
 800080a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800080e:	81bb      	strh	r3, [r7, #12]
				  		  uint16_t b =graypixel & LCD_ILI9341_COLOR_BLUE;
 8000810:	8abb      	ldrh	r3, [r7, #20]
 8000812:	f003 031f 	and.w	r3, r3, #31
 8000816:	817b      	strh	r3, [r7, #10]
				  		  graypixel = (r + b*(64/32) + g)/3;
 8000818:	89fa      	ldrh	r2, [r7, #14]
 800081a:	897b      	ldrh	r3, [r7, #10]
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	441a      	add	r2, r3
 8000820:	89bb      	ldrh	r3, [r7, #12]
 8000822:	4413      	add	r3, r2
 8000824:	4a16      	ldr	r2, [pc, #88]	; (8000880 <Bin_Image+0xf8>)
 8000826:	fb82 1203 	smull	r1, r2, r2, r3
 800082a:	17db      	asrs	r3, r3, #31
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	82bb      	strh	r3, [r7, #20]
				  		  if(graypixel>=thress) binpixel= 0xffff;
 8000830:	8aba      	ldrh	r2, [r7, #20]
 8000832:	8afb      	ldrh	r3, [r7, #22]
 8000834:	429a      	cmp	r2, r3
 8000836:	d303      	bcc.n	8000840 <Bin_Image+0xb8>
 8000838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800083c:	847b      	strh	r3, [r7, #34]	; 0x22
 800083e:	e001      	b.n	8000844 <Bin_Image+0xbc>
				  		  else binpixel = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	847b      	strh	r3, [r7, #34]	; 0x22
				  		  *p_lcdData = binpixel;
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8000848:	801a      	strh	r2, [r3, #0]
				  		  check = check +2;
 800084a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084c:	3302      	adds	r3, #2
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
				  		  if(check>=153600) break;
 8000850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000852:	f5b3 3f16 	cmp.w	r3, #153600	; 0x25800
 8000856:	d206      	bcs.n	8000866 <Bin_Image+0xde>
				  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH/2; x++)
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	3301      	adds	r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	2b9f      	cmp	r3, #159	; 0x9f
 8000862:	d9ae      	bls.n	80007c2 <Bin_Image+0x3a>
 8000864:	e000      	b.n	8000868 <Bin_Image+0xe0>
				  		  if(check>=153600) break;
 8000866:	bf00      	nop
		for(uint32_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	3301      	adds	r3, #1
 800086c:	61fb      	str	r3, [r7, #28]
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000874:	d3a2      	bcc.n	80007bc <Bin_Image+0x34>
				  	  	  }
		return HAL_OK;
 8000876:	2300      	movs	r3, #0

}
 8000878:	4618      	mov	r0, r3
 800087a:	3728      	adds	r7, #40	; 0x28
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	55555556 	.word	0x55555556

08000884 <ColorFiler_Image>:
RET ColorFiler_Image(unsigned char *p_buffer, uint32_t lenght, uint16_t color)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	4613      	mov	r3, r2
 8000890:	80fb      	strh	r3, [r7, #6]
	uint16_t* p_lcdData;
	lcdIli9341_setArea(0, 0, LCD_ILI9341_WIDTH - 1, LCD_ILI9341_HEIGHT - 1);
 8000892:	23ef      	movs	r3, #239	; 0xef
 8000894:	f240 123f 	movw	r2, #319	; 0x13f
 8000898:	2100      	movs	r1, #0
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f83f 	bl	800091e <lcdIli9341_setArea>
	p_lcdData=lcdIli9341_getDrawAddress();
 80008a0:	f000 f8c8 	bl	8000a34 <lcdIli9341_getDrawAddress>
 80008a4:	61b8      	str	r0, [r7, #24]
	for(uint16_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 80008a6:	2300      	movs	r3, #0
 80008a8:	83fb      	strh	r3, [r7, #30]
 80008aa:	e02f      	b.n	800090c <ColorFiler_Image+0x88>
		    {
		  	  for(uint16_t x = 0; x < LCD_ILI9341_WIDTH/2; x++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	83bb      	strh	r3, [r7, #28]
 80008b0:	e026      	b.n	8000900 <ColorFiler_Image+0x7c>
		  	  {
		  		  uint16_t lcdData = convRGB565(*(p_buffer + (LCD_ILI9341_WIDTH*y) + 2*x), *(p_buffer + (LCD_ILI9341_WIDTH*y) +2*x + 1));
 80008b2:	8bfa      	ldrh	r2, [r7, #30]
 80008b4:	4613      	mov	r3, r2
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	4413      	add	r3, r2
 80008ba:	019b      	lsls	r3, r3, #6
 80008bc:	461a      	mov	r2, r3
 80008be:	8bbb      	ldrh	r3, [r7, #28]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	68fa      	ldr	r2, [r7, #12]
 80008c6:	4413      	add	r3, r2
 80008c8:	7818      	ldrb	r0, [r3, #0]
 80008ca:	8bfa      	ldrh	r2, [r7, #30]
 80008cc:	4613      	mov	r3, r2
 80008ce:	009b      	lsls	r3, r3, #2
 80008d0:	4413      	add	r3, r2
 80008d2:	019b      	lsls	r3, r3, #6
 80008d4:	461a      	mov	r2, r3
 80008d6:	8bbb      	ldrh	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	4413      	add	r3, r2
 80008dc:	3301      	adds	r3, #1
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f7ff fdeb 	bl	80004c0 <convRGB565>
 80008ea:	4603      	mov	r3, r0
 80008ec:	82fb      	strh	r3, [r7, #22]
		  		 *p_lcdData = (lcdData & color);
 80008ee:	8afa      	ldrh	r2, [r7, #22]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	4013      	ands	r3, r2
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	801a      	strh	r2, [r3, #0]
		  	  for(uint16_t x = 0; x < LCD_ILI9341_WIDTH/2; x++)
 80008fa:	8bbb      	ldrh	r3, [r7, #28]
 80008fc:	3301      	adds	r3, #1
 80008fe:	83bb      	strh	r3, [r7, #28]
 8000900:	8bbb      	ldrh	r3, [r7, #28]
 8000902:	2b9f      	cmp	r3, #159	; 0x9f
 8000904:	d9d5      	bls.n	80008b2 <ColorFiler_Image+0x2e>
	for(uint16_t y = 0; y <  LCD_ILI9341_HEIGHT*2; y++)
 8000906:	8bfb      	ldrh	r3, [r7, #30]
 8000908:	3301      	adds	r3, #1
 800090a:	83fb      	strh	r3, [r7, #30]
 800090c:	8bfb      	ldrh	r3, [r7, #30]
 800090e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000912:	d3cb      	bcc.n	80008ac <ColorFiler_Image+0x28>

		  	  }
		    }
	return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <lcdIli9341_setArea>:
#endif
static void lcdIli9341_readData();

/*** External Function Defines ***/
void lcdIli9341_setArea(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 800091e:	b590      	push	{r4, r7, lr}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	4604      	mov	r4, r0
 8000926:	4608      	mov	r0, r1
 8000928:	4611      	mov	r1, r2
 800092a:	461a      	mov	r2, r3
 800092c:	4623      	mov	r3, r4
 800092e:	80fb      	strh	r3, [r7, #6]
 8000930:	4603      	mov	r3, r0
 8000932:	80bb      	strh	r3, [r7, #4]
 8000934:	460b      	mov	r3, r1
 8000936:	807b      	strh	r3, [r7, #2]
 8000938:	4613      	mov	r3, r2
 800093a:	803b      	strh	r3, [r7, #0]
  lcdIli9341_writeCmd(0x2a);
 800093c:	202a      	movs	r0, #42	; 0x2a
 800093e:	f000 f942 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(xStart >> 8);
 8000942:	88fb      	ldrh	r3, [r7, #6]
 8000944:	0a1b      	lsrs	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f94b 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(xStart & 0xff);
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	b29b      	uxth	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f000 f945 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd >> 8);
 800095a:	887b      	ldrh	r3, [r7, #2]
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	4618      	mov	r0, r3
 8000962:	f000 f93f 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(xEnd & 0xff);
 8000966:	887b      	ldrh	r3, [r7, #2]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	b29b      	uxth	r3, r3
 800096c:	4618      	mov	r0, r3
 800096e:	f000 f939 	bl	8000be4 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b);
 8000972:	202b      	movs	r0, #43	; 0x2b
 8000974:	f000 f927 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(yStart >> 8);
 8000978:	88bb      	ldrh	r3, [r7, #4]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f930 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(yStart & 0xff);
 8000984:	88bb      	ldrh	r3, [r7, #4]
 8000986:	b2db      	uxtb	r3, r3
 8000988:	b29b      	uxth	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f92a 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd >> 8);
 8000990:	883b      	ldrh	r3, [r7, #0]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f924 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(yEnd & 0xff);
 800099c:	883b      	ldrh	r3, [r7, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	b29b      	uxth	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f000 f91e 	bl	8000be4 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2c);
 80009a8:	202c      	movs	r0, #44	; 0x2c
 80009aa:	f000 f90c 	bl	8000bc6 <lcdIli9341_writeCmd>
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd90      	pop	{r4, r7, pc}
	...

080009b8 <lcdIli9341_drawRect>:
  // the first read is invalid
  lcdIli9341_readData();
}

void lcdIli9341_drawRect(uint16_t xStart, uint16_t yStart, uint16_t width, uint16_t height, uint16_t color)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4604      	mov	r4, r0
 80009c0:	4608      	mov	r0, r1
 80009c2:	4611      	mov	r1, r2
 80009c4:	461a      	mov	r2, r3
 80009c6:	4623      	mov	r3, r4
 80009c8:	80fb      	strh	r3, [r7, #6]
 80009ca:	4603      	mov	r3, r0
 80009cc:	80bb      	strh	r3, [r7, #4]
 80009ce:	460b      	mov	r3, r1
 80009d0:	807b      	strh	r3, [r7, #2]
 80009d2:	4613      	mov	r3, r2
 80009d4:	803b      	strh	r3, [r7, #0]
  lcdIli9341_setArea(xStart, yStart, xStart + width - 1, yStart + height - 1);
 80009d6:	88fa      	ldrh	r2, [r7, #6]
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	4413      	add	r3, r2
 80009dc:	b29b      	uxth	r3, r3
 80009de:	3b01      	subs	r3, #1
 80009e0:	b29c      	uxth	r4, r3
 80009e2:	88ba      	ldrh	r2, [r7, #4]
 80009e4:	883b      	ldrh	r3, [r7, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	3b01      	subs	r3, #1
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	88b9      	ldrh	r1, [r7, #4]
 80009f0:	88f8      	ldrh	r0, [r7, #6]
 80009f2:	4622      	mov	r2, r4
 80009f4:	f7ff ff93 	bl	800091e <lcdIli9341_setArea>
  for( uint16_t y = 0; y < height; y++ ){
 80009f8:	2300      	movs	r3, #0
 80009fa:	81fb      	strh	r3, [r7, #14]
 80009fc:	e00f      	b.n	8000a1e <lcdIli9341_drawRect+0x66>
    for( uint16_t x = 0; x < width; x++ ){
 80009fe:	2300      	movs	r3, #0
 8000a00:	81bb      	strh	r3, [r7, #12]
 8000a02:	e005      	b.n	8000a10 <lcdIli9341_drawRect+0x58>
//      lcdIli9341_writeData(color >> 8);
//      lcdIli9341_writeData(color);
      LCD_DATA = color;
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <lcdIli9341_drawRect+0x78>)
 8000a06:	8c3b      	ldrh	r3, [r7, #32]
 8000a08:	8013      	strh	r3, [r2, #0]
    for( uint16_t x = 0; x < width; x++ ){
 8000a0a:	89bb      	ldrh	r3, [r7, #12]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	81bb      	strh	r3, [r7, #12]
 8000a10:	89ba      	ldrh	r2, [r7, #12]
 8000a12:	887b      	ldrh	r3, [r7, #2]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3f5      	bcc.n	8000a04 <lcdIli9341_drawRect+0x4c>
  for( uint16_t y = 0; y < height; y++ ){
 8000a18:	89fb      	ldrh	r3, [r7, #14]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	81fb      	strh	r3, [r7, #14]
 8000a1e:	89fa      	ldrh	r2, [r7, #14]
 8000a20:	883b      	ldrh	r3, [r7, #0]
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3eb      	bcc.n	80009fe <lcdIli9341_drawRect+0x46>
    }
  }
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	60020000 	.word	0x60020000

08000a34 <lcdIli9341_getDrawAddress>:

inline uint16_t* lcdIli9341_getDrawAddress()
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return (uint16_t*)LCD_DATA_ADDR;
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <lcdIli9341_getDrawAddress+0x10>)
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	60020000 	.word	0x60020000

08000a48 <lcdIli9341_init>:

RET lcdIli9341_init()
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af02      	add	r7, sp, #8
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_ResetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);
  //  GPIO_SetBits(GPIO_RESET_PORT, GPIO_RESET_PIN);  delay(10);

  lcdIli9341_writeCmd(0x01); //software reset
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 f8b9 	bl	8000bc6 <lcdIli9341_writeCmd>
  HAL_Delay(50);
 8000a54:	2032      	movs	r0, #50	; 0x32
 8000a56:	f001 f869 	bl	8001b2c <HAL_Delay>
  lcdIli9341_writeCmd(0x11); //exit sleep
 8000a5a:	2011      	movs	r0, #17
 8000a5c:	f000 f8b3 	bl	8000bc6 <lcdIli9341_writeCmd>
  HAL_Delay(50);
 8000a60:	2032      	movs	r0, #50	; 0x32
 8000a62:	f001 f863 	bl	8001b2c <HAL_Delay>

  lcdIli9341_writeCmd(0xB6);
 8000a66:	20b6      	movs	r0, #182	; 0xb6
 8000a68:	f000 f8ad 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0A);
 8000a6c:	200a      	movs	r0, #10
 8000a6e:	f000 f8b9 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0xC2);
 8000a72:	20c2      	movs	r0, #194	; 0xc2
 8000a74:	f000 f8b6 	bl	8000be4 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x36);   // memory access control
 8000a78:	2036      	movs	r0, #54	; 0x36
 8000a7a:	f000 f8a4 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x68);     // BGR -> seems RGB
 8000a7e:	2068      	movs	r0, #104	; 0x68
 8000a80:	f000 f8b0 	bl	8000be4 <lcdIli9341_writeData>
//  lcdIli9341_writeData(0x60);     // RGB -> seems BGR

  lcdIli9341_writeCmd(0x3A); // pixel format
 8000a84:	203a      	movs	r0, #58	; 0x3a
 8000a86:	f000 f89e 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x55); //RGB565 (16bit)
 8000a8a:	2055      	movs	r0, #85	; 0x55
 8000a8c:	f000 f8aa 	bl	8000be4 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0xE0); //gamma
 8000a90:	20e0      	movs	r0, #224	; 0xe0
 8000a92:	f000 f898 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x10);
 8000a96:	2010      	movs	r0, #16
 8000a98:	f000 f8a4 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 8000a9c:	2010      	movs	r0, #16
 8000a9e:	f000 f8a1 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x10);
 8000aa2:	2010      	movs	r0, #16
 8000aa4:	f000 f89e 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x08);
 8000aa8:	2008      	movs	r0, #8
 8000aaa:	f000 f89b 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000aae:	200e      	movs	r0, #14
 8000ab0:	f000 f898 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x06);
 8000ab4:	2006      	movs	r0, #6
 8000ab6:	f000 f895 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x42);
 8000aba:	2042      	movs	r0, #66	; 0x42
 8000abc:	f000 f892 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x28);
 8000ac0:	2028      	movs	r0, #40	; 0x28
 8000ac2:	f000 f88f 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x36);
 8000ac6:	2036      	movs	r0, #54	; 0x36
 8000ac8:	f000 f88c 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 8000acc:	2003      	movs	r0, #3
 8000ace:	f000 f889 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000ad2:	200e      	movs	r0, #14
 8000ad4:	f000 f886 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000ad8:	2004      	movs	r0, #4
 8000ada:	f000 f883 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x13);
 8000ade:	2013      	movs	r0, #19
 8000ae0:	f000 f880 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0E);
 8000ae4:	200e      	movs	r0, #14
 8000ae6:	f000 f87d 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 8000aea:	200c      	movs	r0, #12
 8000aec:	f000 f87a 	bl	8000be4 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0XE1); //gamma
 8000af0:	20e1      	movs	r0, #225	; 0xe1
 8000af2:	f000 f868 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x0C);
 8000af6:	200c      	movs	r0, #12
 8000af8:	f000 f874 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x23);
 8000afc:	2023      	movs	r0, #35	; 0x23
 8000afe:	f000 f871 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x26);
 8000b02:	2026      	movs	r0, #38	; 0x26
 8000b04:	f000 f86e 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000b08:	2004      	movs	r0, #4
 8000b0a:	f000 f86b 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0C);
 8000b0e:	200c      	movs	r0, #12
 8000b10:	f000 f868 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x04);
 8000b14:	2004      	movs	r0, #4
 8000b16:	f000 f865 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x39);
 8000b1a:	2039      	movs	r0, #57	; 0x39
 8000b1c:	f000 f862 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x24);
 8000b20:	2024      	movs	r0, #36	; 0x24
 8000b22:	f000 f85f 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x4B);
 8000b26:	204b      	movs	r0, #75	; 0x4b
 8000b28:	f000 f85c 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x03);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f859 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 8000b32:	200b      	movs	r0, #11
 8000b34:	f000 f856 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0B);
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f000 f853 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x33);
 8000b3e:	2033      	movs	r0, #51	; 0x33
 8000b40:	f000 f850 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x37);
 8000b44:	2037      	movs	r0, #55	; 0x37
 8000b46:	f000 f84d 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x0F);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f84a 	bl	8000be4 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2a);//
 8000b50:	202a      	movs	r0, #42	; 0x2a
 8000b52:	f000 f838 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f000 f844 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f000 f841 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f000 f83e 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0xef);
 8000b68:	20ef      	movs	r0, #239	; 0xef
 8000b6a:	f000 f83b 	bl	8000be4 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x2b); //
 8000b6e:	202b      	movs	r0, #43	; 0x2b
 8000b70:	f000 f829 	bl	8000bc6 <lcdIli9341_writeCmd>
  lcdIli9341_writeData(0x00);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 f835 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x00);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f832 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x01);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f000 f82f 	bl	8000be4 <lcdIli9341_writeData>
  lcdIli9341_writeData(0x3f);
 8000b86:	203f      	movs	r0, #63	; 0x3f
 8000b88:	f000 f82c 	bl	8000be4 <lcdIli9341_writeData>

  lcdIli9341_writeCmd(0x29);
 8000b8c:	2029      	movs	r0, #41	; 0x29
 8000b8e:	f000 f81a 	bl	8000bc6 <lcdIli9341_writeCmd>
  HAL_Delay(10);
 8000b92:	200a      	movs	r0, #10
 8000b94:	f000 ffca 	bl	8001b2c <HAL_Delay>
  lcdIli9341_writeCmd(0x2C);
 8000b98:	202c      	movs	r0, #44	; 0x2c
 8000b9a:	f000 f814 	bl	8000bc6 <lcdIli9341_writeCmd>
//  lcdIli9341_readData();
//  lcdIli9341_readData();
//  lcdIli9341_readData();

//  lcdIli9341_drawRect(0, 0, LCD_ILI9341_WIDTH, LCD_ILI9341_HEIGHT, 0xffff);
  lcdIli9341_drawRect(0, 0, LCD_ILI9341_WIDTH, LCD_ILI9341_HEIGHT, 0x0000);
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	23f0      	movs	r3, #240	; 0xf0
 8000ba4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2000      	movs	r0, #0
 8000bac:	f7ff ff04 	bl	80009b8 <lcdIli9341_drawRect>
  lcdIli9341_setArea(0, 0, LCD_ILI9341_WIDTH - 1, LCD_ILI9341_HEIGHT - 1);
 8000bb0:	23ef      	movs	r3, #239	; 0xef
 8000bb2:	f240 123f 	movw	r2, #319	; 0x13f
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff feb0 	bl	800091e <lcdIli9341_setArea>

  return RET_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <lcdIli9341_writeCmd>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeCmd(uint16_t cmd)
#else
inline static void lcdIli9341_writeCmd(uint8_t cmd)
#endif
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	80fb      	strh	r3, [r7, #6]
  LCD_CMD = cmd;
 8000bd0:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bd4:	88fb      	ldrh	r3, [r7, #6]
 8000bd6:	8013      	strh	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <lcdIli9341_writeData>:
#ifdef BIT_WIDTH_16
inline static void lcdIli9341_writeData(uint16_t data)
#else
inline static void lcdIli9341_writeData(uint8_t data)
#endif
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]
  LCD_DATA = data;
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <lcdIli9341_writeData+0x1c>)
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	8013      	strh	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	60020000 	.word	0x60020000

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0a:	f000 ff4d 	bl	8001aa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0e:	f000 f82d 	bl	8000c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c12:	f000 f913 	bl	8000e3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c16:	f000 f8f1 	bl	8000dfc <MX_DMA_Init>
  MX_DCMI_Init();
 8000c1a:	f000 f899 	bl	8000d50 <MX_DCMI_Init>
  MX_FSMC_Init();
 8000c1e:	f000 fa2d 	bl	800107c <MX_FSMC_Init>
  MX_I2C2_Init();
 8000c22:	f000 f8bd 	bl	8000da0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  //lcd Init
  lcdIli9341_init();
 8000c26:	f7ff ff0f 	bl	8000a48 <lcdIli9341_init>
  lcdIli9341_drawRect(80, 80, 100, 100,  LCD_ILI9341_COLOR_RED |  LCD_ILI9341_COLOR_BLUE);
 8000c2a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8000c2e:	9300      	str	r3, [sp, #0]
 8000c30:	2364      	movs	r3, #100	; 0x64
 8000c32:	2264      	movs	r2, #100	; 0x64
 8000c34:	2150      	movs	r1, #80	; 0x50
 8000c36:	2050      	movs	r0, #80	; 0x50
 8000c38:	f7ff febe 	bl	80009b8 <lcdIli9341_drawRect>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if (counter_now != counter_pre)
 8000c3c:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <main+0x60>)
 8000c3e:	881b      	ldrh	r3, [r3, #0]
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <main+0x64>)
 8000c44:	881b      	ldrh	r3, [r3, #0]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d0f7      	beq.n	8000c3c <main+0x38>
	  {
		  switch_mode(counter_now);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <main+0x60>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fb00 	bl	8001258 <switch_mode>
		  counter_pre = counter_now;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <main+0x60>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <main+0x64>)
 8000c60:	801a      	strh	r2, [r3, #0]
	  if (counter_now != counter_pre)
 8000c62:	e7eb      	b.n	8000c3c <main+0x38>
 8000c64:	20000028 	.word	0x20000028
 8000c68:	2000002a 	.word	0x2000002a

08000c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b094      	sub	sp, #80	; 0x50
 8000c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	2230      	movs	r2, #48	; 0x30
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f004 ff80 	bl	8005b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	4b2c      	ldr	r3, [pc, #176]	; (8000d48 <SystemClock_Config+0xdc>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a2b      	ldr	r2, [pc, #172]	; (8000d48 <SystemClock_Config+0xdc>)
 8000c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <SystemClock_Config+0xdc>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <SystemClock_Config+0xe0>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a25      	ldr	r2, [pc, #148]	; (8000d4c <SystemClock_Config+0xe0>)
 8000cb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cba:	6013      	str	r3, [r2, #0]
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <SystemClock_Config+0xe0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ce0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ce4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cea:	2307      	movs	r3, #7
 8000cec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cee:	f107 0320 	add.w	r3, r7, #32
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fe64 	bl	80049c0 <HAL_RCC_OscConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cfe:	f000 fb57 	bl	80013b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2302      	movs	r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d1a:	f107 030c 	add.w	r3, r7, #12
 8000d1e:	2105      	movs	r1, #5
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 f8c5 	bl	8004eb0 <HAL_RCC_ClockConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d2c:	f000 fb40 	bl	80013b0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8000d30:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000d34:	f44f 01c0 	mov.w	r1, #6291456	; 0x600000
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f004 f99f 	bl	800507c <HAL_RCC_MCOConfig>
}
 8000d3e:	bf00      	nop
 8000d40:	3750      	adds	r7, #80	; 0x50
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40007000 	.word	0x40007000

08000d50 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000d54:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <MX_DCMI_Init+0x4c>)
 8000d58:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d62:	2220      	movs	r2, #32
 8000d64:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_DCMI_Init+0x48>)
 8000d86:	f001 fa11 	bl	80021ac <HAL_DCMI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000d90:	f000 fb0e 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000154 	.word	0x20000154
 8000d9c:	50050000 	.word	0x50050000

08000da0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <MX_I2C2_Init+0x54>)
 8000da8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000dac:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <MX_I2C2_Init+0x58>)
 8000dae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc4:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ddc:	4804      	ldr	r0, [pc, #16]	; (8000df0 <MX_I2C2_Init+0x50>)
 8000dde:	f003 f993 	bl	8004108 <HAL_I2C_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000de8:	f000 fae2 	bl	80013b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000004c 	.word	0x2000004c
 8000df4:	40005800 	.word	0x40005800
 8000df8:	000186a0 	.word	0x000186a0

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <MX_DMA_Init+0x3c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <MX_DMA_Init+0x3c>)
 8000e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <MX_DMA_Init+0x3c>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	2039      	movs	r0, #57	; 0x39
 8000e24:	f000 ff5e 	bl	8001ce4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e28:	2039      	movs	r0, #57	; 0x39
 8000e2a:	f000 ff77 	bl	8001d1c <HAL_NVIC_EnableIRQ>

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40023800 	.word	0x40023800

08000e3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	609a      	str	r2, [r3, #8]
 8000e4e:	60da      	str	r2, [r3, #12]
 8000e50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	4b83      	ldr	r3, [pc, #524]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	4a82      	ldr	r2, [pc, #520]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e5c:	f043 0310 	orr.w	r3, r3, #16
 8000e60:	6313      	str	r3, [r2, #48]	; 0x30
 8000e62:	4b80      	ldr	r3, [pc, #512]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	4b7c      	ldr	r3, [pc, #496]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	4a7b      	ldr	r2, [pc, #492]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e78:	f043 0304 	orr.w	r3, r3, #4
 8000e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7e:	4b79      	ldr	r3, [pc, #484]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	f003 0304 	and.w	r3, r3, #4
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b75      	ldr	r3, [pc, #468]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a74      	ldr	r2, [pc, #464]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b72      	ldr	r3, [pc, #456]	; (8001064 <MX_GPIO_Init+0x228>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	; (8001064 <MX_GPIO_Init+0x228>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a6d      	ldr	r2, [pc, #436]	; (8001064 <MX_GPIO_Init+0x228>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b6b      	ldr	r3, [pc, #428]	; (8001064 <MX_GPIO_Init+0x228>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b67      	ldr	r3, [pc, #412]	; (8001064 <MX_GPIO_Init+0x228>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a66      	ldr	r2, [pc, #408]	; (8001064 <MX_GPIO_Init+0x228>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b64      	ldr	r3, [pc, #400]	; (8001064 <MX_GPIO_Init+0x228>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b60      	ldr	r3, [pc, #384]	; (8001064 <MX_GPIO_Init+0x228>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a5f      	ldr	r2, [pc, #380]	; (8001064 <MX_GPIO_Init+0x228>)
 8000ee8:	f043 0308 	orr.w	r3, r3, #8
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b5d      	ldr	r3, [pc, #372]	; (8001064 <MX_GPIO_Init+0x228>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000efa:	2201      	movs	r2, #1
 8000efc:	2108      	movs	r1, #8
 8000efe:	485a      	ldr	r0, [pc, #360]	; (8001068 <MX_GPIO_Init+0x22c>)
 8000f00:	f003 f8e8 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000f04:	2201      	movs	r2, #1
 8000f06:	2101      	movs	r1, #1
 8000f08:	4858      	ldr	r0, [pc, #352]	; (800106c <MX_GPIO_Init+0x230>)
 8000f0a:	f003 f8e3 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2120      	movs	r1, #32
 8000f12:	4856      	ldr	r0, [pc, #344]	; (800106c <MX_GPIO_Init+0x230>)
 8000f14:	f003 f8de 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GREEN_LED_Pin|ORANGE_LED_Pin, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f1e:	4854      	ldr	r0, [pc, #336]	; (8001070 <MX_GPIO_Init+0x234>)
 8000f20:	f003 f8d8 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2a:	4852      	ldr	r0, [pc, #328]	; (8001074 <MX_GPIO_Init+0x238>)
 8000f2c:	f003 f8d2 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2108      	movs	r1, #8
 8000f34:	484e      	ldr	r0, [pc, #312]	; (8001070 <MX_GPIO_Init+0x234>)
 8000f36:	f003 f8cd 	bl	80040d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000f3a:	2308      	movs	r3, #8
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4845      	ldr	r0, [pc, #276]	; (8001068 <MX_GPIO_Init+0x22c>)
 8000f52:	f002 ff23 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000f56:	2301      	movs	r3, #1
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	483f      	ldr	r0, [pc, #252]	; (800106c <MX_GPIO_Init+0x230>)
 8000f6e:	f002 ff15 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000f72:	2320      	movs	r3, #32
 8000f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4838      	ldr	r0, [pc, #224]	; (800106c <MX_GPIO_Init+0x230>)
 8000f8a:	f002 ff07 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 031c 	add.w	r3, r7, #28
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4835      	ldr	r0, [pc, #212]	; (8001078 <MX_GPIO_Init+0x23c>)
 8000fa2:	f002 fefb 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin ORANGE_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|ORANGE_LED_Pin;
 8000fa6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	482c      	ldr	r0, [pc, #176]	; (8001070 <MX_GPIO_Init+0x234>)
 8000fc0:	f002 feec 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4824      	ldr	r0, [pc, #144]	; (8001074 <MX_GPIO_Init+0x238>)
 8000fe2:	f002 fedb 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000fe6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	481e      	ldr	r0, [pc, #120]	; (8001074 <MX_GPIO_Init+0x238>)
 8000ffc:	f002 fece 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001000:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001012:	230a      	movs	r3, #10
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	4815      	ldr	r0, [pc, #84]	; (8001074 <MX_GPIO_Init+0x238>)
 800101e:	f002 febd 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	480e      	ldr	r0, [pc, #56]	; (8001074 <MX_GPIO_Init+0x238>)
 800103c:	f002 feae 	bl	8003d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001040:	2308      	movs	r3, #8
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	2301      	movs	r3, #1
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4806      	ldr	r0, [pc, #24]	; (8001070 <MX_GPIO_Init+0x234>)
 8001058:	f002 fea0 	bl	8003d9c <HAL_GPIO_Init>

}
 800105c:	bf00      	nop
 800105e:	3730      	adds	r7, #48	; 0x30
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40021000 	.word	0x40021000
 800106c:	40020800 	.word	0x40020800
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40020000 	.word	0x40020000
 8001078:	40020400 	.word	0x40020400

0800107c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
 8001090:	615a      	str	r2, [r3, #20]
 8001092:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001094:	4b27      	ldr	r3, [pc, #156]	; (8001134 <MX_FSMC_Init+0xb8>)
 8001096:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800109a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <MX_FSMC_Init+0xb8>)
 800109e:	4a26      	ldr	r2, [pc, #152]	; (8001138 <MX_FSMC_Init+0xbc>)
 80010a0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80010a2:	4b24      	ldr	r3, [pc, #144]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010a8:	4b22      	ldr	r3, [pc, #136]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010b6:	2210      	movs	r2, #16
 80010b8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <MX_FSMC_Init+0xb8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80010fc:	230f      	movs	r3, #15
 80010fe:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8001100:	2304      	movs	r3, #4
 8001102:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001108:	2310      	movs	r3, #16
 800110a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800110c:	2311      	movs	r3, #17
 800110e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	2200      	movs	r2, #0
 8001118:	4619      	mov	r1, r3
 800111a:	4806      	ldr	r0, [pc, #24]	; (8001134 <MX_FSMC_Init+0xb8>)
 800111c:	f004 f94a 	bl	80053b4 <HAL_SRAM_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001126:	f000 f943 	bl	80013b0 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000104 	.word	0x20000104
 8001138:	a0000104 	.word	0xa0000104

0800113c <camera>:
/* USER CODE BEGIN 4 */



RET camera(uint32_t mode, uint32_t capmode)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	ov7670_init(&hdcmi, &hdma_dcmi, &hi2c2);
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <camera+0x48>)
 8001148:	490f      	ldr	r1, [pc, #60]	; (8001188 <camera+0x4c>)
 800114a:	4810      	ldr	r0, [pc, #64]	; (800118c <camera+0x50>)
 800114c:	f000 f936 	bl	80013bc <ov7670_init>
	ov7670_config(mode);
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f95b 	bl	800140c <ov7670_config>

	 p_lcdData = lcdIli9341_getDrawAddress();
 8001156:	f7ff fc6d 	bl	8000a34 <lcdIli9341_getDrawAddress>
 800115a:	4603      	mov	r3, r0
 800115c:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <camera+0x54>)
 800115e:	6013      	str	r3, [r2, #0]
	 lcdIli9341_setArea(0, 0, LCD_ILI9341_WIDTH - 1, LCD_ILI9341_HEIGHT - 1);
 8001160:	23ef      	movs	r3, #239	; 0xef
 8001162:	f240 123f 	movw	r2, #319	; 0x13f
 8001166:	2100      	movs	r1, #0
 8001168:	2000      	movs	r0, #0
 800116a:	f7ff fbd8 	bl	800091e <lcdIli9341_setArea>

	 ov7670_startCap(capmode, p_lcdData);
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <camera+0x54>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4619      	mov	r1, r3
 8001174:	6838      	ldr	r0, [r7, #0]
 8001176:	f000 f991 	bl	800149c <ov7670_startCap>
	 return HAL_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000004c 	.word	0x2000004c
 8001188:	200000a0 	.word	0x200000a0
 800118c:	20000154 	.word	0x20000154
 8001190:	20000100 	.word	0x20000100

08001194 <lcdIntro>:

RET lcdIntro(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
	  p_lcdData = lcdIli9341_getDrawAddress();
 800119a:	f7ff fc4b 	bl	8000a34 <lcdIli9341_getDrawAddress>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <lcdIntro+0xc0>)
 80011a2:	6013      	str	r3, [r2, #0]
		  lcdIli9341_setArea(0, 0, LCD_ILI9341_WIDTH - 1, LCD_ILI9341_HEIGHT - 1);
 80011a4:	23ef      	movs	r3, #239	; 0xef
 80011a6:	f240 123f 	movw	r2, #319	; 0x13f
 80011aa:	2100      	movs	r1, #0
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff fbb6 	bl	800091e <lcdIli9341_setArea>

			  /*---------------------*/
			  for(uint32_t y = 0 * LCD_ILI9341_HEIGHT/3; y < 2 * LCD_ILI9341_HEIGHT/3; y++)
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	e011      	b.n	80011dc <lcdIntro+0x48>
					  	  {
						  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH; x++)
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	e007      	b.n	80011ce <lcdIntro+0x3a>
						  		  *p_lcdData = LCD_ILI9341_COLOR_RED;
 80011be:	4b25      	ldr	r3, [pc, #148]	; (8001254 <lcdIntro+0xc0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80011c6:	801a      	strh	r2, [r3, #0]
						  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH; x++)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	3301      	adds	r3, #1
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80011d4:	d3f3      	bcc.n	80011be <lcdIntro+0x2a>
			  for(uint32_t y = 0 * LCD_ILI9341_HEIGHT/3; y < 2 * LCD_ILI9341_HEIGHT/3; y++)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	3301      	adds	r3, #1
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b9f      	cmp	r3, #159	; 0x9f
 80011e0:	d9ea      	bls.n	80011b8 <lcdIntro+0x24>
					  	  }
			  for(uint32_t y = 1 * LCD_ILI9341_HEIGHT/3; y < 2 * LCD_ILI9341_HEIGHT/3; y++)
 80011e2:	2350      	movs	r3, #80	; 0x50
 80011e4:	60fb      	str	r3, [r7, #12]
 80011e6:	e011      	b.n	800120c <lcdIntro+0x78>
			  	  {
				  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH; x++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	e007      	b.n	80011fe <lcdIntro+0x6a>
				  		  *p_lcdData = LCD_ILI9341_COLOR_GREEN;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <lcdIntro+0xc0>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80011f6:	801a      	strh	r2, [r3, #0]
				  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH; x++)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	3301      	adds	r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001204:	d3f3      	bcc.n	80011ee <lcdIntro+0x5a>
			  for(uint32_t y = 1 * LCD_ILI9341_HEIGHT/3; y < 2 * LCD_ILI9341_HEIGHT/3; y++)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	3301      	adds	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b9f      	cmp	r3, #159	; 0x9f
 8001210:	d9ea      	bls.n	80011e8 <lcdIntro+0x54>
			  	  }
			  for(uint32_t y = 2 * LCD_ILI9341_HEIGHT/3; y < 3 * LCD_ILI9341_HEIGHT/3; y++)
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	e010      	b.n	800123a <lcdIntro+0xa6>
			  	  {
				  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH; x++)
 8001218:	2300      	movs	r3, #0
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	e006      	b.n	800122c <lcdIntro+0x98>
				  		  *p_lcdData = LCD_ILI9341_COLOR_BLUE;
 800121e:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <lcdIntro+0xc0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	221f      	movs	r2, #31
 8001224:	801a      	strh	r2, [r3, #0]
				  	  for(uint32_t x = 0; x < LCD_ILI9341_WIDTH; x++)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	3301      	adds	r3, #1
 800122a:	603b      	str	r3, [r7, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001232:	d3f4      	bcc.n	800121e <lcdIntro+0x8a>
			  for(uint32_t y = 2 * LCD_ILI9341_HEIGHT/3; y < 3 * LCD_ILI9341_HEIGHT/3; y++)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3301      	adds	r3, #1
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2bef      	cmp	r3, #239	; 0xef
 800123e:	d9eb      	bls.n	8001218 <lcdIntro+0x84>
			  	  }
			  HAL_Delay(500);
 8001240:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001244:	f000 fc72 	bl	8001b2c <HAL_Delay>
		return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000100 	.word	0x20000100

08001258 <switch_mode>:

void switch_mode(uint32_t mode)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	uint16_t  modeStatus =  HAL_BUSY ;
 8001260:	2302      	movs	r3, #2
 8001262:	81fb      	strh	r3, [r7, #14]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3b01      	subs	r3, #1
 8001268:	2b08      	cmp	r3, #8
 800126a:	f200 8089 	bhi.w	8001380 <switch_mode+0x128>
 800126e:	a201      	add	r2, pc, #4	; (adr r2, 8001274 <switch_mode+0x1c>)
 8001270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001274:	08001299 	.word	0x08001299
 8001278:	080012ad 	.word	0x080012ad
 800127c:	080012c7 	.word	0x080012c7
 8001280:	080012e1 	.word	0x080012e1
 8001284:	080012fb 	.word	0x080012fb
 8001288:	08001319 	.word	0x08001319
 800128c:	08001337 	.word	0x08001337
 8001290:	08001353 	.word	0x08001353
 8001294:	0800136d 	.word	0x0800136d
	switch(mode)
	{
	case 1:{
		 ov7670_reset();
 8001298:	f000 f8e8 	bl	800146c <ov7670_reset>
		modeStatus = lcdIntro();
 800129c:	f7ff ff7a 	bl	8001194 <lcdIntro>
 80012a0:	4603      	mov	r3, r0
 80012a2:	81fb      	strh	r3, [r7, #14]
		while(modeStatus != HAL_OK);
 80012a4:	89fb      	ldrh	r3, [r7, #14]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1fc      	bne.n	80012a4 <switch_mode+0x4c>
		break;
 80012aa:	e069      	b.n	8001380 <switch_mode+0x128>
		}
	case 2:
	{	ov7670_reset();
 80012ac:	f000 f8de 	bl	800146c <ov7670_reset>
		modeStatus = RGB_Image(gImage, 153600);
 80012b0:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80012b4:	4834      	ldr	r0, [pc, #208]	; (8001388 <switch_mode+0x130>)
 80012b6:	f7ff f91e 	bl	80004f6 <RGB_Image>
 80012ba:	4603      	mov	r3, r0
 80012bc:	81fb      	strh	r3, [r7, #14]
		while(modeStatus != HAL_OK);
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1fc      	bne.n	80012be <switch_mode+0x66>
		break;
 80012c4:	e05c      	b.n	8001380 <switch_mode+0x128>
	}
	case 3:
	{	ov7670_reset();
 80012c6:	f000 f8d1 	bl	800146c <ov7670_reset>
		modeStatus = Gray32_Image(gImage, 153600);
 80012ca:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80012ce:	482e      	ldr	r0, [pc, #184]	; (8001388 <switch_mode+0x130>)
 80012d0:	f7ff f964 	bl	800059c <Gray32_Image>
 80012d4:	4603      	mov	r3, r0
 80012d6:	81fb      	strh	r3, [r7, #14]
		while (modeStatus != HAL_OK);
 80012d8:	89fb      	ldrh	r3, [r7, #14]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1fc      	bne.n	80012d8 <switch_mode+0x80>
		break;
 80012de:	e04f      	b.n	8001380 <switch_mode+0x128>
	}
	case 4:
	{
		ov7670_reset();
 80012e0:	f000 f8c4 	bl	800146c <ov7670_reset>
		modeStatus = Bin_Image(gImage, 153600);
 80012e4:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80012e8:	4827      	ldr	r0, [pc, #156]	; (8001388 <switch_mode+0x130>)
 80012ea:	f7ff fa4d 	bl	8000788 <Bin_Image>
 80012ee:	4603      	mov	r3, r0
 80012f0:	81fb      	strh	r3, [r7, #14]
		while (modeStatus != HAL_OK);
 80012f2:	89fb      	ldrh	r3, [r7, #14]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1fc      	bne.n	80012f2 <switch_mode+0x9a>
		break;
 80012f8:	e042      	b.n	8001380 <switch_mode+0x128>
	}
	case 5:
	{
		ov7670_reset();
 80012fa:	f000 f8b7 	bl	800146c <ov7670_reset>
		modeStatus = ColorFiler_Image(gImage, 153600, LCD_ILI9341_COLOR_RED );
 80012fe:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001302:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8001306:	4820      	ldr	r0, [pc, #128]	; (8001388 <switch_mode+0x130>)
 8001308:	f7ff fabc 	bl	8000884 <ColorFiler_Image>
 800130c:	4603      	mov	r3, r0
 800130e:	81fb      	strh	r3, [r7, #14]
		while (modeStatus != HAL_OK);
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1fc      	bne.n	8001310 <switch_mode+0xb8>
		break;
 8001316:	e033      	b.n	8001380 <switch_mode+0x128>
	}
	case 6:
	{
		ov7670_reset();
 8001318:	f000 f8a8 	bl	800146c <ov7670_reset>
		modeStatus = ColorFiler_Image(gImage, 153600, LCD_ILI9341_COLOR_GREEN );
 800131c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001320:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8001324:	4818      	ldr	r0, [pc, #96]	; (8001388 <switch_mode+0x130>)
 8001326:	f7ff faad 	bl	8000884 <ColorFiler_Image>
 800132a:	4603      	mov	r3, r0
 800132c:	81fb      	strh	r3, [r7, #14]
		while (modeStatus != HAL_OK);
 800132e:	89fb      	ldrh	r3, [r7, #14]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d1fc      	bne.n	800132e <switch_mode+0xd6>
		break;
 8001334:	e024      	b.n	8001380 <switch_mode+0x128>
	}
	case 7:
	{
		ov7670_reset();
 8001336:	f000 f899 	bl	800146c <ov7670_reset>
		modeStatus = ColorFiler_Image(gImage, 153600, LCD_ILI9341_COLOR_BLUE);
 800133a:	221f      	movs	r2, #31
 800133c:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 8001340:	4811      	ldr	r0, [pc, #68]	; (8001388 <switch_mode+0x130>)
 8001342:	f7ff fa9f 	bl	8000884 <ColorFiler_Image>
 8001346:	4603      	mov	r3, r0
 8001348:	81fb      	strh	r3, [r7, #14]
		while (modeStatus != HAL_OK);
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1fc      	bne.n	800134a <switch_mode+0xf2>
		break;
 8001350:	e016      	b.n	8001380 <switch_mode+0x128>
	}
	case 8:
	{
		ov7670_reset();
 8001352:	f000 f88b 	bl	800146c <ov7670_reset>
		modeStatus = Negative_Image(gImage, 153600);
 8001356:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800135a:	480b      	ldr	r0, [pc, #44]	; (8001388 <switch_mode+0x130>)
 800135c:	f7ff f99e 	bl	800069c <Negative_Image>
 8001360:	4603      	mov	r3, r0
 8001362:	81fb      	strh	r3, [r7, #14]
		while (modeStatus != HAL_OK);
 8001364:	89fb      	ldrh	r3, [r7, #14]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1fc      	bne.n	8001364 <switch_mode+0x10c>
		break;
 800136a:	e009      	b.n	8001380 <switch_mode+0x128>
	}
	case 9:{
		modeStatus = camera(OV7670_MODE_QVGA_RGB565, OV7670_CAP_CONTINUOUS);
 800136c:	2100      	movs	r1, #0
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fee4 	bl	800113c <camera>
 8001374:	4603      	mov	r3, r0
 8001376:	81fb      	strh	r3, [r7, #14]
		while(modeStatus != HAL_OK);
 8001378:	89fb      	ldrh	r3, [r7, #14]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1fc      	bne.n	8001378 <switch_mode+0x120>
		break;
 800137e:	bf00      	nop
		}
	}
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	08005ba8 	.word	0x08005ba8

0800138c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a04      	ldr	r2, [pc, #16]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d101      	bne.n	80013a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800139e:	f000 fba5 	bl	8001aec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40001000 	.word	0x40001000

080013b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b4:	b672      	cpsid	i
}
 80013b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <Error_Handler+0x8>
	...

080013bc <ov7670_init>:
static RET ov7670_write(uint8_t regAddr, uint8_t data);
//static RET ov7670_read(uint8_t regAddr, uint8_t *data);

/*** External Function Defines ***/
RET ov7670_init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  sp_hdcmi     = p_hdcmi;
 80013c8:	4a0c      	ldr	r2, [pc, #48]	; (80013fc <ov7670_init+0x40>)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6013      	str	r3, [r2, #0]
  sp_hdma_dcmi = p_hdma_dcmi;
 80013ce:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <ov7670_init+0x44>)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	6013      	str	r3, [r2, #0]
  sp_hi2c      = p_hi2c;
 80013d4:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <ov7670_init+0x48>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  s_destAddressForContiuousMode = 0;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <ov7670_init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
  ov7670_reset();
 80013e0:	f000 f844 	bl	800146c <ov7670_reset>
  ov7670_write(0x12, 0x80);  // RESET
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	2012      	movs	r0, #18
 80013e8:	f000 f8ce 	bl	8001588 <ov7670_write>
  HAL_Delay(30);
 80013ec:	201e      	movs	r0, #30
 80013ee:	f000 fb9d 	bl	8001b2c <HAL_Delay>
  return RET_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000002c 	.word	0x2000002c
 8001400:	20000030 	.word	0x20000030
 8001404:	20000034 	.word	0x20000034
 8001408:	20000038 	.word	0x20000038

0800140c <ov7670_config>:

RET ov7670_config(uint32_t mode)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  ov7670_stopCap();
 8001414:	f000 f870 	bl	80014f8 <ov7670_stopCap>
  ov7670_write(0x12, 0x80);  // RESET
 8001418:	2180      	movs	r1, #128	; 0x80
 800141a:	2012      	movs	r0, #18
 800141c:	f000 f8b4 	bl	8001588 <ov7670_write>
  HAL_Delay(30);
 8001420:	201e      	movs	r0, #30
 8001422:	f000 fb83 	bl	8001b2c <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	e012      	b.n	8001452 <ov7670_config+0x46>
    ov7670_write(OV7670_reg[i][0], OV7670_reg[i][1]);
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <ov7670_config+0x5c>)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <ov7670_config+0x5c>)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	440b      	add	r3, r1
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	4619      	mov	r1, r3
 8001440:	4610      	mov	r0, r2
 8001442:	f000 f8a1 	bl	8001588 <ov7670_write>
    HAL_Delay(1);
 8001446:	2001      	movs	r0, #1
 8001448:	f000 fb70 	bl	8001b2c <HAL_Delay>
  for(int i = 0; OV7670_reg[i][0] != REG_BATT; i++) {
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3301      	adds	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <ov7670_config+0x5c>)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d1e6      	bne.n	800142c <ov7670_config+0x20>
  }
  return RET_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	0802b3a8 	.word	0x0802b3a8

0800146c <ov7670_reset>:

RET ov7670_reset()
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2120      	movs	r1, #32
 8001474:	4808      	ldr	r0, [pc, #32]	; (8001498 <ov7670_reset+0x2c>)
 8001476:	f002 fe2d 	bl	80040d4 <HAL_GPIO_WritePin>

	  HAL_Delay(100);
 800147a:	2064      	movs	r0, #100	; 0x64
 800147c:	f000 fb56 	bl	8001b2c <HAL_Delay>
	  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2120      	movs	r1, #32
 8001484:	4804      	ldr	r0, [pc, #16]	; (8001498 <ov7670_reset+0x2c>)
 8001486:	f002 fe25 	bl	80040d4 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800148a:	2064      	movs	r0, #100	; 0x64
 800148c:	f000 fb4e 	bl	8001b2c <HAL_Delay>
	  return RET_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40020800 	.word	0x40020800

0800149c <ov7670_startCap>:
RET ov7670_startCap(uint32_t capMode, uint32_t destAddress)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  ov7670_stopCap();
 80014a6:	f000 f827 	bl	80014f8 <ov7670_stopCap>
  if (capMode == OV7670_CAP_CONTINUOUS) {
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10b      	bne.n	80014c8 <ov7670_startCap+0x2c>
    /* note: continuous mode automatically invokes DCMI, but DMA needs to be invoked manually */
    s_destAddressForContiuousMode = destAddress;
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <ov7670_startCap+0x54>)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	6013      	str	r3, [r2, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <ov7670_startCap+0x58>)
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	2100      	movs	r1, #0
 80014c2:	f000 fc39 	bl	8001d38 <HAL_DCMI_Start_DMA>
 80014c6:	e00d      	b.n	80014e4 <ov7670_startCap+0x48>
  } else if (capMode == OV7670_CAP_SINGLE_FRAME) {
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d10a      	bne.n	80014e4 <ov7670_startCap+0x48>
    s_destAddressForContiuousMode = 0;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <ov7670_startCap+0x54>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
    HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, destAddress, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <ov7670_startCap+0x58>)
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	2102      	movs	r1, #2
 80014e0:	f000 fc2a 	bl	8001d38 <HAL_DCMI_Start_DMA>
  }

  return RET_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000038 	.word	0x20000038
 80014f4:	2000002c 	.word	0x2000002c

080014f8 <ov7670_stopCap>:

RET ov7670_stopCap()
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  HAL_DCMI_Stop(sp_hdcmi);
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <ov7670_stopCap+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fcb9 	bl	8001e78 <HAL_DCMI_Stop>
//  HAL_Delay(30);
  return RET_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	bd80      	pop	{r7, pc}
 800150c:	2000002c 	.word	0x2000002c

08001510 <HAL_DCMI_FrameEventCallback>:
  s_cbHsync = cbHsync;
  s_cbVsync = cbVsync;
}

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
//  printf("FRAME %d\n", HAL_GetTick());
  if(s_cbVsync)s_cbVsync(s_currentV);
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_DCMI_FrameEventCallback+0x54>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d005      	beq.n	800152c <HAL_DCMI_FrameEventCallback+0x1c>
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_DCMI_FrameEventCallback+0x54>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_DCMI_FrameEventCallback+0x58>)
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	4610      	mov	r0, r2
 800152a:	4798      	blx	r3
  if(s_destAddressForContiuousMode != 0) {
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_DCMI_FrameEventCallback+0x5c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00b      	beq.n	800154c <HAL_DCMI_FrameEventCallback+0x3c>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	3328      	adds	r3, #40	; 0x28
 800153e:	4619      	mov	r1, r3
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_DCMI_FrameEventCallback+0x5c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001548:	f000 ff4c 	bl	80023e4 <HAL_DMA_Start_IT>
  }
  s_currentV++;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_DCMI_FrameEventCallback+0x58>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	3301      	adds	r3, #1
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <HAL_DCMI_FrameEventCallback+0x58>)
 8001554:	6013      	str	r3, [r2, #0]
  s_currentH = 0;
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <HAL_DCMI_FrameEventCallback+0x60>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000003c 	.word	0x2000003c
 8001568:	20000044 	.word	0x20000044
 800156c:	20000038 	.word	0x20000038
 8001570:	20000040 	.word	0x20000040

08001574 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
//  printf("VSYNC %d\n", HAL_GetTick());
//  HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <ov7670_write>:
//  s_currentH++;
//}

/*** Internal Function Defines ***/
static RET ov7670_write(uint8_t regAddr, uint8_t data)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af04      	add	r7, sp, #16
 800158e:	4603      	mov	r3, r0
 8001590:	460a      	mov	r2, r1
 8001592:	71fb      	strb	r3, [r7, #7]
 8001594:	4613      	mov	r3, r2
 8001596:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef ret;
  do {
    ret = HAL_I2C_Mem_Write(sp_hi2c, SLAVE_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, &data, 1, 100);
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <ov7670_write+0x3c>)
 800159a:	6818      	ldr	r0, [r3, #0]
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	b29a      	uxth	r2, r3
 80015a0:	2364      	movs	r3, #100	; 0x64
 80015a2:	9302      	str	r3, [sp, #8]
 80015a4:	2301      	movs	r3, #1
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	1dbb      	adds	r3, r7, #6
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2301      	movs	r3, #1
 80015ae:	2142      	movs	r1, #66	; 0x42
 80015b0:	f002 feee 	bl	8004390 <HAL_I2C_Mem_Write>
 80015b4:	4603      	mov	r3, r0
 80015b6:	73fb      	strb	r3, [r7, #15]
  } while (ret != HAL_OK && 0);
  return ret;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	20000034 	.word	0x20000034

080015c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_MspInit+0x54>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a11      	ldr	r2, [pc, #68]	; (800161c <HAL_MspInit+0x54>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_MspInit+0x54>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_MspInit+0x54>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_MspInit+0x54>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_MspInit+0x54>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	210f      	movs	r1, #15
 800160a:	f06f 0001 	mvn.w	r0, #1
 800160e:	f000 fb69 	bl	8001ce4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800

08001620 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a54      	ldr	r2, [pc, #336]	; (8001790 <HAL_DCMI_MspInit+0x170>)
 800163e:	4293      	cmp	r3, r2
 8001640:	f040 80a1 	bne.w	8001786 <HAL_DCMI_MspInit+0x166>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
 8001648:	4b52      	ldr	r3, [pc, #328]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164c:	4a51      	ldr	r2, [pc, #324]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6353      	str	r3, [r2, #52]	; 0x34
 8001654:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 8001656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	61bb      	str	r3, [r7, #24]
 800165e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 8001666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001668:	4a4a      	ldr	r2, [pc, #296]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6313      	str	r3, [r2, #48]	; 0x30
 8001670:	4b48      	ldr	r3, [pc, #288]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 8001672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	617b      	str	r3, [r7, #20]
 800167a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167c:	2300      	movs	r3, #0
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	4b44      	ldr	r3, [pc, #272]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 8001682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001684:	4a43      	ldr	r2, [pc, #268]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6313      	str	r3, [r2, #48]	; 0x30
 800168c:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 800168e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	4b3d      	ldr	r3, [pc, #244]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 800169e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a0:	4a3c      	ldr	r2, [pc, #240]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 80016a2:	f043 0302 	orr.w	r3, r3, #2
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <HAL_DCMI_MspInit+0x174>)
 80016aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80016b4:	2350      	movs	r3, #80	; 0x50
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016bc:	2302      	movs	r3, #2
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016c4:	230d      	movs	r3, #13
 80016c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	4832      	ldr	r0, [pc, #200]	; (8001798 <HAL_DCMI_MspInit+0x178>)
 80016d0:	f002 fb64 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80016d4:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 80016d8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016de:	2302      	movs	r3, #2
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80016e6:	230d      	movs	r3, #13
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	482a      	ldr	r0, [pc, #168]	; (800179c <HAL_DCMI_MspInit+0x17c>)
 80016f2:	f002 fb53 	bl	8003d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80016f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001700:	2302      	movs	r3, #2
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001708:	230d      	movs	r3, #13
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	4823      	ldr	r0, [pc, #140]	; (80017a0 <HAL_DCMI_MspInit+0x180>)
 8001714:	f002 fb42 	bl	8003d9c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8001718:	4b22      	ldr	r3, [pc, #136]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 800171a:	4a23      	ldr	r2, [pc, #140]	; (80017a8 <HAL_DCMI_MspInit+0x188>)
 800171c:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 800171e:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 8001720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001724:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001726:	4b1f      	ldr	r3, [pc, #124]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_DISABLE;
 8001732:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 800173a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800173e:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001740:	4b18      	ldr	r3, [pc, #96]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 8001742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001746:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8001748:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800175a:	4812      	ldr	r0, [pc, #72]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 800175c:	f000 fd94 	bl	8002288 <HAL_DMA_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <HAL_DCMI_MspInit+0x14a>
    {
      Error_Handler();
 8001766:	f7ff fe23 	bl	80013b0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 800176e:	639a      	str	r2, [r3, #56]	; 0x38
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <HAL_DCMI_MspInit+0x184>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 5, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2105      	movs	r1, #5
 800177a:	204e      	movs	r0, #78	; 0x4e
 800177c:	f000 fab2 	bl	8001ce4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8001780:	204e      	movs	r0, #78	; 0x4e
 8001782:	f000 facb 	bl	8001d1c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	50050000 	.word	0x50050000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020400 	.word	0x40020400
 80017a4:	200000a0 	.word	0x200000a0
 80017a8:	40026428 	.word	0x40026428

080017ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	; 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_I2C_MspInit+0x84>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d12c      	bne.n	8001828 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <HAL_I2C_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a17      	ldr	r2, [pc, #92]	; (8001834 <HAL_I2C_MspInit+0x88>)
 80017d8:	f043 0302 	orr.w	r3, r3, #2
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <HAL_I2C_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f8:	2303      	movs	r3, #3
 80017fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017fc:	2304      	movs	r3, #4
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4619      	mov	r1, r3
 8001806:	480c      	ldr	r0, [pc, #48]	; (8001838 <HAL_I2C_MspInit+0x8c>)
 8001808:	f002 fac8 	bl	8003d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_I2C_MspInit+0x88>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <HAL_I2C_MspInit+0x88>)
 8001816:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_I2C_MspInit+0x88>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40005800 	.word	0x40005800
 8001834:	40023800 	.word	0x40023800
 8001838:	40020400 	.word	0x40020400

0800183c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <HAL_FSMC_MspInit+0x88>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d131      	bne.n	80018bc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <HAL_FSMC_MspInit+0x88>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_FSMC_MspInit+0x8c>)
 8001864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <HAL_FSMC_MspInit+0x8c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6393      	str	r3, [r2, #56]	; 0x38
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_FSMC_MspInit+0x8c>)
 8001870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800187a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800187e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800188c:	230c      	movs	r3, #12
 800188e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	4619      	mov	r1, r3
 8001894:	480d      	ldr	r0, [pc, #52]	; (80018cc <HAL_FSMC_MspInit+0x90>)
 8001896:	f002 fa81 	bl	8003d9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800189a:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 800189e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a8:	2303      	movs	r3, #3
 80018aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80018ac:	230c      	movs	r3, #12
 80018ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <HAL_FSMC_MspInit+0x94>)
 80018b6:	f002 fa71 	bl	8003d9c <HAL_GPIO_Init>
 80018ba:	e000      	b.n	80018be <HAL_FSMC_MspInit+0x82>
    return;
 80018bc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000048 	.word	0x20000048
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40020c00 	.word	0x40020c00

080018d4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80018dc:	f7ff ffae 	bl	800183c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	; 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	2036      	movs	r0, #54	; 0x36
 80018fe:	f000 f9f1 	bl	8001ce4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001902:	2036      	movs	r0, #54	; 0x36
 8001904:	f000 fa0a 	bl	8001d1c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	4b1f      	ldr	r3, [pc, #124]	; (800198c <HAL_InitTick+0xa4>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a1e      	ldr	r2, [pc, #120]	; (800198c <HAL_InitTick+0xa4>)
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
 8001918:	4b1c      	ldr	r3, [pc, #112]	; (800198c <HAL_InitTick+0xa4>)
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001924:	f107 0210 	add.w	r2, r7, #16
 8001928:	f107 0314 	add.w	r3, r7, #20
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f003 fd0e 	bl	8005350 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001934:	f003 fcf8 	bl	8005328 <HAL_RCC_GetPCLK1Freq>
 8001938:	4603      	mov	r3, r0
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001940:	4a13      	ldr	r2, [pc, #76]	; (8001990 <HAL_InitTick+0xa8>)
 8001942:	fba2 2303 	umull	r2, r3, r2, r3
 8001946:	0c9b      	lsrs	r3, r3, #18
 8001948:	3b01      	subs	r3, #1
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_InitTick+0xac>)
 800194e:	4a12      	ldr	r2, [pc, #72]	; (8001998 <HAL_InitTick+0xb0>)
 8001950:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_InitTick+0xac>)
 8001954:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001958:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800195a:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_InitTick+0xac>)
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <HAL_InitTick+0xac>)
 8001962:	2200      	movs	r2, #0
 8001964:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_InitTick+0xac>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800196c:	4809      	ldr	r0, [pc, #36]	; (8001994 <HAL_InitTick+0xac>)
 800196e:	f003 fd65 	bl	800543c <HAL_TIM_Base_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d104      	bne.n	8001982 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001978:	4806      	ldr	r0, [pc, #24]	; (8001994 <HAL_InitTick+0xac>)
 800197a:	f003 fdb9 	bl	80054f0 <HAL_TIM_Base_Start_IT>
 800197e:	4603      	mov	r3, r0
 8001980:	e000      	b.n	8001984 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
}
 8001984:	4618      	mov	r0, r3
 8001986:	3730      	adds	r7, #48	; 0x30
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40023800 	.word	0x40023800
 8001990:	431bde83 	.word	0x431bde83
 8001994:	20000194 	.word	0x20000194
 8001998:	40001000 	.word	0x40001000

0800199c <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <TIM6_DAC_IRQHandler+0x10>)
 80019b2:	f003 fe0d 	bl	80055d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000194 	.word	0x20000194

080019c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <DMA2_Stream1_IRQHandler+0x10>)
 80019c6:	f000 fdf7 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200000a0 	.word	0x200000a0

080019d4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <DCMI_IRQHandler+0x10>)
 80019da:	f000 faa9 	bl	8001f30 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000154 	.word	0x20000154

080019e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <SystemInit+0x60>)
 80019ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <SystemInit+0x60>)
 80019f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <SystemInit+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <SystemInit+0x64>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a08:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <SystemInit+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a0e:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <SystemInit+0x64>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <SystemInit+0x64>)
 8001a14:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <SystemInit+0x64>)
 8001a20:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <SystemInit+0x68>)
 8001a22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <SystemInit+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <SystemInit+0x64>)
 8001a2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <SystemInit+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a36:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <SystemInit+0x60>)
 8001a38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a3c:	609a      	str	r2, [r3, #8]
#endif
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	24003010 	.word	0x24003010

08001a54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a5a:	e003      	b.n	8001a64 <LoopCopyDataInit>

08001a5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a62:	3104      	adds	r1, #4

08001a64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a64:	480b      	ldr	r0, [pc, #44]	; (8001a94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a6c:	d3f6      	bcc.n	8001a5c <CopyDataInit>
  ldr  r2, =_sbss
 8001a6e:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a70:	e002      	b.n	8001a78 <LoopFillZerobss>

08001a72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a74:	f842 3b04 	str.w	r3, [r2], #4

08001a78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a7c:	d3f9      	bcc.n	8001a72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a7e:	f7ff ffb3 	bl	80019e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a82:	f004 f859 	bl	8005b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a86:	f7ff f8bd 	bl	8000c04 <main>
  bx  lr    
 8001a8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001a8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001a90:	0802b434 	.word	0x0802b434
  ldr  r0, =_sdata
 8001a94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001a98:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001a9c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001aa0:	200001e0 	.word	0x200001e0

08001aa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa4:	e7fe      	b.n	8001aa4 <ADC_IRQHandler>
	...

08001aa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aac:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <HAL_Init+0x40>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0d      	ldr	r2, [pc, #52]	; (8001ae8 <HAL_Init+0x40>)
 8001ab2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_Init+0x40>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <HAL_Init+0x40>)
 8001abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ac2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x40>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x40>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f8fc 	bl	8001cce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff ff06 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fd74 	bl	80015c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	200001dc 	.word	0x200001dc

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200001dc 	.word	0x200001dc

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000008 	.word	0x20000008

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	; (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	; (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	; 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ff4c 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
 8001cf0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf6:	f7ff ff61 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001cfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	6978      	ldr	r0, [r7, #20]
 8001d02:	f7ff ffb1 	bl	8001c68 <NVIC_EncodePriority>
 8001d06:	4602      	mov	r2, r0
 8001d08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff ff80 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ff54 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d30:	bf00      	nop
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
 8001d44:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <HAL_DCMI_Start_DMA+0x20>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e086      	b.n	8001e66 <HAL_DCMI_Start_DMA+0x12e>
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d76:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f022 0202 	bic.w	r2, r2, #2
 8001d86:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6819      	ldr	r1, [r3, #0]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9c:	4a34      	ldr	r2, [pc, #208]	; (8001e70 <HAL_DCMI_Start_DMA+0x138>)
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001da4:	4a33      	ldr	r2, [pc, #204]	; (8001e74 <HAL_DCMI_Start_DMA+0x13c>)
 8001da6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	2200      	movs	r2, #0
 8001dae:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d20a      	bcs.n	8001dda <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3328      	adds	r3, #40	; 0x28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	f000 fb06 	bl	80023e4 <HAL_DMA_Start_IT>
 8001dd8:	e038      	b.n	8001e4c <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	4a24      	ldr	r2, [pc, #144]	; (8001e70 <HAL_DCMI_Start_DMA+0x138>)
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2201      	movs	r2, #1
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001df4:	e009      	b.n	8001e0a <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfa:	085a      	lsrs	r2, r3, #1
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e04:	005a      	lsls	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e12:	d2f0      	bcs.n	8001df6 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	1e9a      	subs	r2, r3, #2
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3328      	adds	r3, #40	; 0x28
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	f000 fe20 	bl	8002a8c <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	08002055 	.word	0x08002055
 8001e74:	0800217f 	.word	0x0800217f

08001e78 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001e80:	4b29      	ldr	r3, [pc, #164]	; (8001f28 <HAL_DCMI_Stop+0xb0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_DCMI_Stop+0xb4>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	089b      	lsrs	r3, r3, #2
 8001e8e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_DCMI_Stop+0x2a>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e03e      	b.n	8001f20 <HAL_DCMI_Stop+0xa8>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0201 	bic.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	1e5a      	subs	r2, r3, #1
 8001ec6:	60ba      	str	r2, [r7, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d108      	bne.n	8001ede <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	73fb      	strb	r3, [r7, #15]
      break;
 8001edc:	e006      	b.n	8001eec <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ea      	bne.n	8001ec2 <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001efa:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f00:	4618      	mov	r0, r3
 8001f02:	f000 fac7 	bl	8002494 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	92492493 	.word	0x92492493

08001f30 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2204      	movs	r2, #4
 8001f50:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f56:	f043 0202 	orr.w	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2204      	movs	r2, #4
 8001f62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	4a2f      	ldr	r2, [pc, #188]	; (8002028 <HAL_DCMI_IRQHandler+0xf8>)
 8001f6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fafe 	bl	8002574 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d016      	beq.n	8001fb0 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2202      	movs	r2, #2
 8001f88:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	f043 0201 	orr.w	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa2:	4a21      	ldr	r2, [pc, #132]	; (8002028 <HAL_DCMI_IRQHandler+0xf8>)
 8001fa4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 fae2 	bl	8002574 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d006      	beq.n	8001fc8 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2210      	movs	r2, #16
 8001fc0:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f83c 	bl	8002040 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d006      	beq.n	8001fe0 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2208      	movs	r2, #8
 8001fd8:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff faca 	bl	8001574 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d107      	bne.n	8002008 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 021e 	bic.w	r2, r2, #30
 8002006:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0201 	bic.w	r2, r2, #1
 8002016:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7ff fa79 	bl	8001510 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	0800217f 	.word	0x0800217f

0800202c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002064:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	2b00      	cmp	r3, #0
 800206c:	d043      	beq.n	80020f6 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207a:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d118      	bne.n	80020ba <DCMI_DMAXferCplt+0x66>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d015      	beq.n	80020ba <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	00da      	lsls	r2, r3, #3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4413      	add	r3, r2
 80020a6:	2200      	movs	r2, #0
 80020a8:	4619      	mov	r1, r3
 80020aa:	f001 fe37 	bl	8003d1c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b2:	1e5a      	subs	r2, r3, #1
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
 80020b8:	e044      	b.n	8002144 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d13c      	bne.n	8002144 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	00da      	lsls	r2, r3, #3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	2201      	movs	r2, #1
 80020e4:	4619      	mov	r1, r3
 80020e6:	f001 fe19 	bl	8003d1c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ee:	1e5a      	subs	r2, r3, #1
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
 80020f4:	e026      	b.n	8002144 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d006      	beq.n	8002114 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	e017      	b.n	8002144 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002128:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	440a      	add	r2, r1
 800213a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	429a      	cmp	r2, r3
 800214e:	d112      	bne.n	8002176 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b02      	cmp	r3, #2
 800216c:	d103      	bne.n	8002176 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b084      	sub	sp, #16
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002192:	2b02      	cmp	r3, #2
 8002194:	d003      	beq.n	800219e <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7ff ff44 	bl	800202c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e05f      	b.n	800227e <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff fa24 	bl	8001620 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7ff fa21 	bl	8001620 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2202      	movs	r2, #2
 80021e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80021f4:	f023 0308 	bic.w	r3, r3, #8
 80021f8:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800220e:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800221a:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8002226:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b10      	cmp	r3, #16
 8002236:	d112      	bne.n	800225e <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7f1b      	ldrb	r3, [r3, #28]
 800223c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7f5b      	ldrb	r3, [r3, #29]
 8002242:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002244:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7f9b      	ldrb	r3, [r3, #30]
 800224a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800224c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	7fdb      	ldrb	r3, [r3, #31]
 8002254:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 800225a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 800225c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 021e 	orr.w	r2, r2, #30
 800226c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fc3e 	bl	8001b14 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e099      	b.n	80023d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c4:	e00f      	b.n	80022e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022c6:	f7ff fc25 	bl	8001b14 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d908      	bls.n	80022e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e078      	b.n	80023d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1e8      	bne.n	80022c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <HAL_DMA_Init+0x158>)
 8002300:	4013      	ands	r3, r2
 8002302:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002312:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800231e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800232a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2b04      	cmp	r3, #4
 800233e:	d107      	bne.n	8002350 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002348:	4313      	orrs	r3, r2
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f023 0307 	bic.w	r3, r3, #7
 8002366:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	2b04      	cmp	r3, #4
 8002378:	d117      	bne.n	80023aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fb01 	bl	8002994 <DMA_CheckFifoParam>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2240      	movs	r2, #64	; 0x40
 800239c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023a6:	2301      	movs	r3, #1
 80023a8:	e016      	b.n	80023d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f000 fab8 	bl	8002928 <DMA_CalcBaseAndBitshift>
 80023b8:	4603      	mov	r3, r0
 80023ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	223f      	movs	r2, #63	; 0x3f
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	f010803f 	.word	0xf010803f

080023e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_DMA_Start_IT+0x26>
 8002406:	2302      	movs	r3, #2
 8002408:	e040      	b.n	800248c <HAL_DMA_Start_IT+0xa8>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b01      	cmp	r3, #1
 800241c:	d12f      	bne.n	800247e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2202      	movs	r2, #2
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fa4a 	bl	80028cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	223f      	movs	r2, #63	; 0x3f
 800243e:	409a      	lsls	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0216 	orr.w	r2, r2, #22
 8002452:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	2b00      	cmp	r3, #0
 800245a:	d007      	beq.n	800246c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0208 	orr.w	r2, r2, #8
 800246a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e005      	b.n	800248a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002486:	2302      	movs	r3, #2
 8002488:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800248a:	7dfb      	ldrb	r3, [r7, #23]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024a2:	f7ff fb37 	bl	8001b14 <HAL_GetTick>
 80024a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d008      	beq.n	80024c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e052      	b.n	800256c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0216 	bic.w	r2, r2, #22
 80024d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_DMA_Abort+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0208 	bic.w	r2, r2, #8
 8002504:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002516:	e013      	b.n	8002540 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002518:	f7ff fafc 	bl	8001b14 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b05      	cmp	r3, #5
 8002524:	d90c      	bls.n	8002540 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2203      	movs	r2, #3
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e015      	b.n	800256c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e4      	bne.n	8002518 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	223f      	movs	r2, #63	; 0x3f
 8002554:	409a      	lsls	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d004      	beq.n	8002592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	; 0x80
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00c      	b.n	80025ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2205      	movs	r2, #5
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025c4:	4b92      	ldr	r3, [pc, #584]	; (8002810 <HAL_DMA_IRQHandler+0x258>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a92      	ldr	r2, [pc, #584]	; (8002814 <HAL_DMA_IRQHandler+0x25c>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e2:	2208      	movs	r2, #8
 80025e4:	409a      	lsls	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01a      	beq.n	8002624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0204 	bic.w	r2, r2, #4
 800260a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002610:	2208      	movs	r2, #8
 8002612:	409a      	lsls	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	2201      	movs	r2, #1
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d012      	beq.n	800265a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	2201      	movs	r2, #1
 8002648:	409a      	lsls	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265e:	2204      	movs	r2, #4
 8002660:	409a      	lsls	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d012      	beq.n	8002690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	2204      	movs	r2, #4
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	2210      	movs	r2, #16
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d043      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d03c      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2210      	movs	r2, #16
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d018      	beq.n	80026fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d108      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d024      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
 80026e6:	e01f      	b.n	8002728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01b      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
 80026f8:	e016      	b.n	8002728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0208 	bic.w	r2, r2, #8
 8002716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272c:	2220      	movs	r2, #32
 800272e:	409a      	lsls	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 808e 	beq.w	8002856 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8086 	beq.w	8002856 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2220      	movs	r2, #32
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b05      	cmp	r3, #5
 8002760:	d136      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0216 	bic.w	r2, r2, #22
 8002770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_DMA_IRQHandler+0x1da>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0208 	bic.w	r2, r2, #8
 80027a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a6:	223f      	movs	r2, #63	; 0x3f
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d07d      	beq.n	80028c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
        }
        return;
 80027ce:	e078      	b.n	80028c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01c      	beq.n	8002818 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d108      	bne.n	80027fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d030      	beq.n	8002856 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
 80027fc:	e02b      	b.n	8002856 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d027      	beq.n	8002856 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
 800280e:	e022      	b.n	8002856 <HAL_DMA_IRQHandler+0x29e>
 8002810:	20000000 	.word	0x20000000
 8002814:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0210 	bic.w	r2, r2, #16
 8002834:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800285a:	2b00      	cmp	r3, #0
 800285c:	d032      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d022      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2205      	movs	r2, #5
 800286e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	429a      	cmp	r2, r3
 800288c:	d307      	bcc.n	800289e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f2      	bne.n	8002882 <HAL_DMA_IRQHandler+0x2ca>
 800289c:	e000      	b.n	80028a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800289e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	4798      	blx	r3
 80028c0:	e000      	b.n	80028c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80028c2:	bf00      	nop
    }
  }
}
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop

080028cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
 80028d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b40      	cmp	r3, #64	; 0x40
 80028f8:	d108      	bne.n	800290c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800290a:	e007      	b.n	800291c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	60da      	str	r2, [r3, #12]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	3b10      	subs	r3, #16
 8002938:	4a14      	ldr	r2, [pc, #80]	; (800298c <DMA_CalcBaseAndBitshift+0x64>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002942:	4a13      	ldr	r2, [pc, #76]	; (8002990 <DMA_CalcBaseAndBitshift+0x68>)
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d909      	bls.n	800296a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	1d1a      	adds	r2, r3, #4
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	659a      	str	r2, [r3, #88]	; 0x58
 8002968:	e007      	b.n	800297a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002972:	f023 0303 	bic.w	r3, r3, #3
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	aaaaaaab 	.word	0xaaaaaaab
 8002990:	0802b41c 	.word	0x0802b41c

08002994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11f      	bne.n	80029ee <DMA_CheckFifoParam+0x5a>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d856      	bhi.n	8002a62 <DMA_CheckFifoParam+0xce>
 80029b4:	a201      	add	r2, pc, #4	; (adr r2, 80029bc <DMA_CheckFifoParam+0x28>)
 80029b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ba:	bf00      	nop
 80029bc:	080029cd 	.word	0x080029cd
 80029c0:	080029df 	.word	0x080029df
 80029c4:	080029cd 	.word	0x080029cd
 80029c8:	08002a63 	.word	0x08002a63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d046      	beq.n	8002a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029dc:	e043      	b.n	8002a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029e6:	d140      	bne.n	8002a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ec:	e03d      	b.n	8002a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f6:	d121      	bne.n	8002a3c <DMA_CheckFifoParam+0xa8>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d837      	bhi.n	8002a6e <DMA_CheckFifoParam+0xda>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <DMA_CheckFifoParam+0x70>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a1b 	.word	0x08002a1b
 8002a0c:	08002a15 	.word	0x08002a15
 8002a10:	08002a2d 	.word	0x08002a2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
      break;
 8002a18:	e030      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d025      	beq.n	8002a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2a:	e022      	b.n	8002a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a34:	d11f      	bne.n	8002a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a3a:	e01c      	b.n	8002a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d903      	bls.n	8002a4a <DMA_CheckFifoParam+0xb6>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d003      	beq.n	8002a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a48:	e018      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a4e:	e015      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00e      	beq.n	8002a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a60:	e00b      	b.n	8002a7a <DMA_CheckFifoParam+0xe6>
      break;
 8002a62:	bf00      	nop
 8002a64:	e00a      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e008      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e006      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e004      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e002      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002a76:	bf00      	nop
 8002a78:	e000      	b.n	8002a7c <DMA_CheckFifoParam+0xe8>
      break;
 8002a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop

08002a8c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d106      	bne.n	8002ab4 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	f001 b913 	b.w	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d105      	bne.n	8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2240      	movs	r2, #64	; 0x40
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	f001 b901 	b.w	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x124e>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d102      	bne.n	8002ae8 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	f001 b8f9 	b.w	8003cda <HAL_DMAEx_MultiBufferStart_IT+0x124e>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	f041 80e7 	bne.w	8003ccc <HAL_DMAEx_MultiBufferStart_IT+0x1240>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b1a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	68b9      	ldr	r1, [r7, #8]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f001 f910 	bl	8003d50 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b99      	ldr	r3, [pc, #612]	; (8002d9c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d960      	bls.n	8002bfe <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a97      	ldr	r2, [pc, #604]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d057      	beq.n	8002bf6 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a96      	ldr	r2, [pc, #600]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d050      	beq.n	8002bf2 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a94      	ldr	r2, [pc, #592]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d049      	beq.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a93      	ldr	r2, [pc, #588]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d042      	beq.n	8002bea <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a91      	ldr	r2, [pc, #580]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d03a      	beq.n	8002be4 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a90      	ldr	r2, [pc, #576]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d032      	beq.n	8002bde <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a8e      	ldr	r2, [pc, #568]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d02a      	beq.n	8002bd8 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a8d      	ldr	r2, [pc, #564]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a8b      	ldr	r2, [pc, #556]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01a      	beq.n	8002bcc <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a8a      	ldr	r2, [pc, #552]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d012      	beq.n	8002bc6 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a88      	ldr	r2, [pc, #544]	; (8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a87      	ldr	r2, [pc, #540]	; (8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d102      	bne.n	8002bba <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8002bb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bb8:	e01e      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002bbe:	e01b      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bc4:	e018      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bca:	e015      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002bd0:	e012      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bd6:	e00f      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bdc:	e00c      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bde:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002be2:	e009      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002be8:	e006      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bea:	2320      	movs	r3, #32
 8002bec:	e004      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e002      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bf2:	2320      	movs	r3, #32
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002bf6:	2320      	movs	r3, #32
 8002bf8:	4a75      	ldr	r2, [pc, #468]	; (8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002bfa:	60d3      	str	r3, [r2, #12]
 8002bfc:	e150      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <HAL_DMAEx_MultiBufferStart_IT+0x348>)
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d960      	bls.n	8002ccc <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a64      	ldr	r2, [pc, #400]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d057      	beq.n	8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a62      	ldr	r2, [pc, #392]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d050      	beq.n	8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a61      	ldr	r2, [pc, #388]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d049      	beq.n	8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5f      	ldr	r2, [pc, #380]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d042      	beq.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5e      	ldr	r2, [pc, #376]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d03a      	beq.n	8002cb2 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5c      	ldr	r2, [pc, #368]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d032      	beq.n	8002cac <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5b      	ldr	r2, [pc, #364]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d02a      	beq.n	8002ca6 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a59      	ldr	r2, [pc, #356]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d022      	beq.n	8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d01a      	beq.n	8002c9a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d012      	beq.n	8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a55      	ldr	r2, [pc, #340]	; (8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00a      	beq.n	8002c8e <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a53      	ldr	r2, [pc, #332]	; (8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d102      	bne.n	8002c88 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8002c82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c86:	e01e      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c8c:	e01b      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c92:	e018      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c98:	e015      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002c9a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c9e:	e012      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ca0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ca4:	e00f      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002ca6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002caa:	e00c      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002cac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb0:	e009      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002cb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cb6:	e006      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002cb8:	2320      	movs	r3, #32
 8002cba:	e004      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002cbc:	2320      	movs	r3, #32
 8002cbe:	e002      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002cc0:	2320      	movs	r3, #32
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002cc4:	2320      	movs	r3, #32
 8002cc6:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <HAL_DMAEx_MultiBufferStart_IT+0x344>)
 8002cc8:	6093      	str	r3, [r2, #8]
 8002cca:	e0e9      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <HAL_DMAEx_MultiBufferStart_IT+0x34c>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	f240 8083 	bls.w	8002de0 <HAL_DMAEx_MultiBufferStart_IT+0x354>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a30      	ldr	r2, [pc, #192]	; (8002da0 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d057      	beq.n	8002d94 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2e      	ldr	r2, [pc, #184]	; (8002da4 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d050      	beq.n	8002d90 <HAL_DMAEx_MultiBufferStart_IT+0x304>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d049      	beq.n	8002d8c <HAL_DMAEx_MultiBufferStart_IT+0x300>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2b      	ldr	r2, [pc, #172]	; (8002dac <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d042      	beq.n	8002d88 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d03a      	beq.n	8002d82 <HAL_DMAEx_MultiBufferStart_IT+0x2f6>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a28      	ldr	r2, [pc, #160]	; (8002db4 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d032      	beq.n	8002d7c <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d02a      	beq.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d022      	beq.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d01a      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0x2de>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_DMAEx_MultiBufferStart_IT+0x338>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d012      	beq.n	8002d64 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <HAL_DMAEx_MultiBufferStart_IT+0x33c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00a      	beq.n	8002d5e <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1f      	ldr	r2, [pc, #124]	; (8002dcc <HAL_DMAEx_MultiBufferStart_IT+0x340>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d102      	bne.n	8002d58 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8002d52:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d56:	e01e      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d58:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002d5c:	e01b      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d62:	e018      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d68:	e015      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d6e:	e012      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d74:	e00f      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d7a:	e00c      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d80:	e009      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d86:	e006      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d88:	2320      	movs	r3, #32
 8002d8a:	e004      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	e002      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d90:	2320      	movs	r3, #32
 8002d92:	e000      	b.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0x30a>
 8002d94:	2320      	movs	r3, #32
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HAL_DMAEx_MultiBufferStart_IT+0x350>)
 8002d98:	60d3      	str	r3, [r2, #12]
 8002d9a:	e081      	b.n	8002ea0 <HAL_DMAEx_MultiBufferStart_IT+0x414>
 8002d9c:	40026458 	.word	0x40026458
 8002da0:	40026010 	.word	0x40026010
 8002da4:	40026410 	.word	0x40026410
 8002da8:	40026070 	.word	0x40026070
 8002dac:	40026470 	.word	0x40026470
 8002db0:	40026028 	.word	0x40026028
 8002db4:	40026428 	.word	0x40026428
 8002db8:	40026088 	.word	0x40026088
 8002dbc:	40026488 	.word	0x40026488
 8002dc0:	40026040 	.word	0x40026040
 8002dc4:	40026440 	.word	0x40026440
 8002dc8:	400260a0 	.word	0x400260a0
 8002dcc:	400264a0 	.word	0x400264a0
 8002dd0:	40026400 	.word	0x40026400
 8002dd4:	400260b8 	.word	0x400260b8
 8002dd8:	40026058 	.word	0x40026058
 8002ddc:	40026000 	.word	0x40026000
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a96      	ldr	r2, [pc, #600]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d057      	beq.n	8002e9a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a95      	ldr	r2, [pc, #596]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d050      	beq.n	8002e96 <HAL_DMAEx_MultiBufferStart_IT+0x40a>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a93      	ldr	r2, [pc, #588]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d049      	beq.n	8002e92 <HAL_DMAEx_MultiBufferStart_IT+0x406>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a92      	ldr	r2, [pc, #584]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d042      	beq.n	8002e8e <HAL_DMAEx_MultiBufferStart_IT+0x402>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a90      	ldr	r2, [pc, #576]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d03a      	beq.n	8002e88 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a8f      	ldr	r2, [pc, #572]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d032      	beq.n	8002e82 <HAL_DMAEx_MultiBufferStart_IT+0x3f6>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a8d      	ldr	r2, [pc, #564]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02a      	beq.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a8c      	ldr	r2, [pc, #560]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a8a      	ldr	r2, [pc, #552]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a89      	ldr	r2, [pc, #548]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d012      	beq.n	8002e6a <HAL_DMAEx_MultiBufferStart_IT+0x3de>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a87      	ldr	r2, [pc, #540]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00a      	beq.n	8002e64 <HAL_DMAEx_MultiBufferStart_IT+0x3d8>
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a86      	ldr	r2, [pc, #536]	; (800306c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d102      	bne.n	8002e5e <HAL_DMAEx_MultiBufferStart_IT+0x3d2>
 8002e58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e5c:	e01e      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e62:	e01b      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e68:	e018      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e6e:	e015      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e74:	e012      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e7a:	e00f      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e80:	e00c      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e86:	e009      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e8c:	e006      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e8e:	2320      	movs	r3, #32
 8002e90:	e004      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e92:	2320      	movs	r3, #32
 8002e94:	e002      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e96:	2320      	movs	r3, #32
 8002e98:	e000      	b.n	8002e9c <HAL_DMAEx_MultiBufferStart_IT+0x410>
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	4a74      	ldr	r2, [pc, #464]	; (8003070 <HAL_DMAEx_MultiBufferStart_IT+0x5e4>)
 8002e9e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b73      	ldr	r3, [pc, #460]	; (8003074 <HAL_DMAEx_MultiBufferStart_IT+0x5e8>)
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d960      	bls.n	8002f6e <HAL_DMAEx_MultiBufferStart_IT+0x4e2>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a63      	ldr	r2, [pc, #396]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d057      	beq.n	8002f66 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a62      	ldr	r2, [pc, #392]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d050      	beq.n	8002f62 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a60      	ldr	r2, [pc, #384]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d049      	beq.n	8002f5e <HAL_DMAEx_MultiBufferStart_IT+0x4d2>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a5f      	ldr	r2, [pc, #380]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d042      	beq.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0x4ce>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5d      	ldr	r2, [pc, #372]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d03a      	beq.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0x4c8>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a5c      	ldr	r2, [pc, #368]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d032      	beq.n	8002f4e <HAL_DMAEx_MultiBufferStart_IT+0x4c2>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a5a      	ldr	r2, [pc, #360]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d02a      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a59      	ldr	r2, [pc, #356]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d022      	beq.n	8002f42 <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a57      	ldr	r2, [pc, #348]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01a      	beq.n	8002f3c <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a56      	ldr	r2, [pc, #344]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d012      	beq.n	8002f36 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a54      	ldr	r2, [pc, #336]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00a      	beq.n	8002f30 <HAL_DMAEx_MultiBufferStart_IT+0x4a4>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a53      	ldr	r2, [pc, #332]	; (800306c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d102      	bne.n	8002f2a <HAL_DMAEx_MultiBufferStart_IT+0x49e>
 8002f24:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f28:	e01e      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f2e:	e01b      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f30:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f34:	e018      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f3a:	e015      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002f40:	e012      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f46:	e00f      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f4c:	e00c      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f52:	e009      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f58:	e006      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f5a:	2310      	movs	r3, #16
 8002f5c:	e004      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f5e:	2310      	movs	r3, #16
 8002f60:	e002      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f62:	2310      	movs	r3, #16
 8002f64:	e000      	b.n	8002f68 <HAL_DMAEx_MultiBufferStart_IT+0x4dc>
 8002f66:	2310      	movs	r3, #16
 8002f68:	4a43      	ldr	r2, [pc, #268]	; (8003078 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 8002f6a:	60d3      	str	r3, [r2, #12]
 8002f6c:	e14f      	b.n	800320e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	4b41      	ldr	r3, [pc, #260]	; (800307c <HAL_DMAEx_MultiBufferStart_IT+0x5f0>)
 8002f76:	429a      	cmp	r2, r3
 8002f78:	f240 8082 	bls.w	8003080 <HAL_DMAEx_MultiBufferStart_IT+0x5f4>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a2f      	ldr	r2, [pc, #188]	; (8003040 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d057      	beq.n	8003036 <HAL_DMAEx_MultiBufferStart_IT+0x5aa>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a2e      	ldr	r2, [pc, #184]	; (8003044 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d050      	beq.n	8003032 <HAL_DMAEx_MultiBufferStart_IT+0x5a6>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d049      	beq.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_DMAEx_MultiBufferStart_IT+0x5c0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d042      	beq.n	800302a <HAL_DMAEx_MultiBufferStart_IT+0x59e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a29      	ldr	r2, [pc, #164]	; (8003050 <HAL_DMAEx_MultiBufferStart_IT+0x5c4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d03a      	beq.n	8003024 <HAL_DMAEx_MultiBufferStart_IT+0x598>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a28      	ldr	r2, [pc, #160]	; (8003054 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d032      	beq.n	800301e <HAL_DMAEx_MultiBufferStart_IT+0x592>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a26      	ldr	r2, [pc, #152]	; (8003058 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d02a      	beq.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0x58c>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a25      	ldr	r2, [pc, #148]	; (800305c <HAL_DMAEx_MultiBufferStart_IT+0x5d0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d022      	beq.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0x586>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a23      	ldr	r2, [pc, #140]	; (8003060 <HAL_DMAEx_MultiBufferStart_IT+0x5d4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01a      	beq.n	800300c <HAL_DMAEx_MultiBufferStart_IT+0x580>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a22      	ldr	r2, [pc, #136]	; (8003064 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d012      	beq.n	8003006 <HAL_DMAEx_MultiBufferStart_IT+0x57a>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a20      	ldr	r2, [pc, #128]	; (8003068 <HAL_DMAEx_MultiBufferStart_IT+0x5dc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00a      	beq.n	8003000 <HAL_DMAEx_MultiBufferStart_IT+0x574>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <HAL_DMAEx_MultiBufferStart_IT+0x5e0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d102      	bne.n	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0x56e>
 8002ff4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002ff8:	e01e      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8002ffa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002ffe:	e01b      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003000:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003004:	e018      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003006:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800300a:	e015      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800300c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003010:	e012      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003016:	e00f      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800301c:	e00c      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800301e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003022:	e009      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003028:	e006      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800302a:	2310      	movs	r3, #16
 800302c:	e004      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 800302e:	2310      	movs	r3, #16
 8003030:	e002      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003032:	2310      	movs	r3, #16
 8003034:	e000      	b.n	8003038 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>
 8003036:	2310      	movs	r3, #16
 8003038:	4a0f      	ldr	r2, [pc, #60]	; (8003078 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>)
 800303a:	6093      	str	r3, [r2, #8]
 800303c:	e0e7      	b.n	800320e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800303e:	bf00      	nop
 8003040:	40026010 	.word	0x40026010
 8003044:	40026410 	.word	0x40026410
 8003048:	40026070 	.word	0x40026070
 800304c:	40026470 	.word	0x40026470
 8003050:	40026028 	.word	0x40026028
 8003054:	40026428 	.word	0x40026428
 8003058:	40026088 	.word	0x40026088
 800305c:	40026488 	.word	0x40026488
 8003060:	40026040 	.word	0x40026040
 8003064:	40026440 	.word	0x40026440
 8003068:	400260a0 	.word	0x400260a0
 800306c:	400264a0 	.word	0x400264a0
 8003070:	40026000 	.word	0x40026000
 8003074:	40026458 	.word	0x40026458
 8003078:	40026400 	.word	0x40026400
 800307c:	400260b8 	.word	0x400260b8
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	461a      	mov	r2, r3
 8003086:	4b96      	ldr	r3, [pc, #600]	; (80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d960      	bls.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x6c2>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a94      	ldr	r2, [pc, #592]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d057      	beq.n	8003146 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a93      	ldr	r2, [pc, #588]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d050      	beq.n	8003142 <HAL_DMAEx_MultiBufferStart_IT+0x6b6>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a91      	ldr	r2, [pc, #580]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d049      	beq.n	800313e <HAL_DMAEx_MultiBufferStart_IT+0x6b2>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a90      	ldr	r2, [pc, #576]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d042      	beq.n	800313a <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a8e      	ldr	r2, [pc, #568]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d03a      	beq.n	8003134 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a8d      	ldr	r2, [pc, #564]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d032      	beq.n	800312e <HAL_DMAEx_MultiBufferStart_IT+0x6a2>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a8b      	ldr	r2, [pc, #556]	; (80032fc <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d02a      	beq.n	8003128 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a8a      	ldr	r2, [pc, #552]	; (8003300 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d022      	beq.n	8003122 <HAL_DMAEx_MultiBufferStart_IT+0x696>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a88      	ldr	r2, [pc, #544]	; (8003304 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d01a      	beq.n	800311c <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a87      	ldr	r2, [pc, #540]	; (8003308 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d012      	beq.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0x68a>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a85      	ldr	r2, [pc, #532]	; (800330c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00a      	beq.n	8003110 <HAL_DMAEx_MultiBufferStart_IT+0x684>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a84      	ldr	r2, [pc, #528]	; (8003310 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d102      	bne.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 8003104:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003108:	e01e      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800310a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800310e:	e01b      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003110:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003114:	e018      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003116:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800311a:	e015      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800311c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003120:	e012      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003126:	e00f      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800312c:	e00c      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800312e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003132:	e009      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003138:	e006      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800313a:	2310      	movs	r3, #16
 800313c:	e004      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 800313e:	2310      	movs	r3, #16
 8003140:	e002      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003142:	2310      	movs	r3, #16
 8003144:	e000      	b.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 8003146:	2310      	movs	r3, #16
 8003148:	4a72      	ldr	r2, [pc, #456]	; (8003314 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800314a:	60d3      	str	r3, [r2, #12]
 800314c:	e05f      	b.n	800320e <HAL_DMAEx_MultiBufferStart_IT+0x782>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a64      	ldr	r2, [pc, #400]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d057      	beq.n	8003208 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a62      	ldr	r2, [pc, #392]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d050      	beq.n	8003204 <HAL_DMAEx_MultiBufferStart_IT+0x778>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a61      	ldr	r2, [pc, #388]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d049      	beq.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0x774>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5f      	ldr	r2, [pc, #380]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d042      	beq.n	80031fc <HAL_DMAEx_MultiBufferStart_IT+0x770>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a5e      	ldr	r2, [pc, #376]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d03a      	beq.n	80031f6 <HAL_DMAEx_MultiBufferStart_IT+0x76a>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a5c      	ldr	r2, [pc, #368]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d032      	beq.n	80031f0 <HAL_DMAEx_MultiBufferStart_IT+0x764>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5b      	ldr	r2, [pc, #364]	; (80032fc <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02a      	beq.n	80031ea <HAL_DMAEx_MultiBufferStart_IT+0x75e>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a59      	ldr	r2, [pc, #356]	; (8003300 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d022      	beq.n	80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d01a      	beq.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x752>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a56      	ldr	r2, [pc, #344]	; (8003308 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d012      	beq.n	80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x74c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a55      	ldr	r2, [pc, #340]	; (800330c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d00a      	beq.n	80031d2 <HAL_DMAEx_MultiBufferStart_IT+0x746>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a53      	ldr	r2, [pc, #332]	; (8003310 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d102      	bne.n	80031cc <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80031c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031ca:	e01e      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80031d0:	e01b      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031d6:	e018      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031dc:	e015      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031e2:	e012      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031e8:	e00f      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ee:	e00c      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f4:	e009      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031fa:	e006      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80031fc:	2310      	movs	r3, #16
 80031fe:	e004      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003200:	2310      	movs	r3, #16
 8003202:	e002      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003204:	2310      	movs	r3, #16
 8003206:	e000      	b.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 8003208:	2310      	movs	r3, #16
 800320a:	4a42      	ldr	r2, [pc, #264]	; (8003314 <HAL_DMAEx_MultiBufferStart_IT+0x888>)
 800320c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	461a      	mov	r2, r3
 8003214:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_DMAEx_MultiBufferStart_IT+0x88c>)
 8003216:	429a      	cmp	r2, r3
 8003218:	f240 8082 	bls.w	8003320 <HAL_DMAEx_MultiBufferStart_IT+0x894>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a30      	ldr	r2, [pc, #192]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d057      	beq.n	80032d6 <HAL_DMAEx_MultiBufferStart_IT+0x84a>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2f      	ldr	r2, [pc, #188]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d050      	beq.n	80032d2 <HAL_DMAEx_MultiBufferStart_IT+0x846>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a2d      	ldr	r2, [pc, #180]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x860>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d049      	beq.n	80032ce <HAL_DMAEx_MultiBufferStart_IT+0x842>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x864>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d042      	beq.n	80032ca <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x868>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d03a      	beq.n	80032c4 <HAL_DMAEx_MultiBufferStart_IT+0x838>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a29      	ldr	r2, [pc, #164]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x86c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d032      	beq.n	80032be <HAL_DMAEx_MultiBufferStart_IT+0x832>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a27      	ldr	r2, [pc, #156]	; (80032fc <HAL_DMAEx_MultiBufferStart_IT+0x870>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d02a      	beq.n	80032b8 <HAL_DMAEx_MultiBufferStart_IT+0x82c>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a26      	ldr	r2, [pc, #152]	; (8003300 <HAL_DMAEx_MultiBufferStart_IT+0x874>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_DMAEx_MultiBufferStart_IT+0x826>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a24      	ldr	r2, [pc, #144]	; (8003304 <HAL_DMAEx_MultiBufferStart_IT+0x878>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01a      	beq.n	80032ac <HAL_DMAEx_MultiBufferStart_IT+0x820>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a23      	ldr	r2, [pc, #140]	; (8003308 <HAL_DMAEx_MultiBufferStart_IT+0x87c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d012      	beq.n	80032a6 <HAL_DMAEx_MultiBufferStart_IT+0x81a>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a21      	ldr	r2, [pc, #132]	; (800330c <HAL_DMAEx_MultiBufferStart_IT+0x880>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00a      	beq.n	80032a0 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a20      	ldr	r2, [pc, #128]	; (8003310 <HAL_DMAEx_MultiBufferStart_IT+0x884>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d102      	bne.n	800329a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 8003294:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003298:	e01e      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 800329a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329e:	e01b      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032a4:	e018      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032a6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032aa:	e015      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80032b0:	e012      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b6:	e00f      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032bc:	e00c      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c2:	e009      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c8:	e006      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032ca:	2308      	movs	r3, #8
 80032cc:	e004      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032ce:	2308      	movs	r3, #8
 80032d0:	e002      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032d2:	2308      	movs	r3, #8
 80032d4:	e000      	b.n	80032d8 <HAL_DMAEx_MultiBufferStart_IT+0x84c>
 80032d6:	2308      	movs	r3, #8
 80032d8:	4a10      	ldr	r2, [pc, #64]	; (800331c <HAL_DMAEx_MultiBufferStart_IT+0x890>)
 80032da:	60d3      	str	r3, [r2, #12]
 80032dc:	e16f      	b.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80032de:	bf00      	nop
 80032e0:	40026058 	.word	0x40026058
 80032e4:	40026010 	.word	0x40026010
 80032e8:	40026410 	.word	0x40026410
 80032ec:	40026070 	.word	0x40026070
 80032f0:	40026470 	.word	0x40026470
 80032f4:	40026028 	.word	0x40026028
 80032f8:	40026428 	.word	0x40026428
 80032fc:	40026088 	.word	0x40026088
 8003300:	40026488 	.word	0x40026488
 8003304:	40026040 	.word	0x40026040
 8003308:	40026440 	.word	0x40026440
 800330c:	400260a0 	.word	0x400260a0
 8003310:	400264a0 	.word	0x400264a0
 8003314:	40026000 	.word	0x40026000
 8003318:	40026458 	.word	0x40026458
 800331c:	40026400 	.word	0x40026400
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4b94      	ldr	r3, [pc, #592]	; (8003578 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003328:	429a      	cmp	r2, r3
 800332a:	d960      	bls.n	80033ee <HAL_DMAEx_MultiBufferStart_IT+0x962>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a92      	ldr	r2, [pc, #584]	; (800357c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d057      	beq.n	80033e6 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a91      	ldr	r2, [pc, #580]	; (8003580 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d050      	beq.n	80033e2 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a8f      	ldr	r2, [pc, #572]	; (8003584 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d049      	beq.n	80033de <HAL_DMAEx_MultiBufferStart_IT+0x952>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a8e      	ldr	r2, [pc, #568]	; (8003588 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d042      	beq.n	80033da <HAL_DMAEx_MultiBufferStart_IT+0x94e>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a8c      	ldr	r2, [pc, #560]	; (800358c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d03a      	beq.n	80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x948>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a8b      	ldr	r2, [pc, #556]	; (8003590 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d032      	beq.n	80033ce <HAL_DMAEx_MultiBufferStart_IT+0x942>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a89      	ldr	r2, [pc, #548]	; (8003594 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d02a      	beq.n	80033c8 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a88      	ldr	r2, [pc, #544]	; (8003598 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d022      	beq.n	80033c2 <HAL_DMAEx_MultiBufferStart_IT+0x936>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a86      	ldr	r2, [pc, #536]	; (800359c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d01a      	beq.n	80033bc <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a85      	ldr	r2, [pc, #532]	; (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d012      	beq.n	80033b6 <HAL_DMAEx_MultiBufferStart_IT+0x92a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a83      	ldr	r2, [pc, #524]	; (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00a      	beq.n	80033b0 <HAL_DMAEx_MultiBufferStart_IT+0x924>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a82      	ldr	r2, [pc, #520]	; (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d102      	bne.n	80033aa <HAL_DMAEx_MultiBufferStart_IT+0x91e>
 80033a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033a8:	e01e      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ae:	e01b      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033b4:	e018      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033ba:	e015      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80033c0:	e012      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033c6:	e00f      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033cc:	e00c      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d2:	e009      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033d8:	e006      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033da:	2308      	movs	r3, #8
 80033dc:	e004      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033de:	2308      	movs	r3, #8
 80033e0:	e002      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033e2:	2308      	movs	r3, #8
 80033e4:	e000      	b.n	80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 80033e6:	2308      	movs	r3, #8
 80033e8:	4a70      	ldr	r2, [pc, #448]	; (80035ac <HAL_DMAEx_MultiBufferStart_IT+0xb20>)
 80033ea:	6093      	str	r3, [r2, #8]
 80033ec:	e0e7      	b.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	4b6e      	ldr	r3, [pc, #440]	; (80035b0 <HAL_DMAEx_MultiBufferStart_IT+0xb24>)
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d960      	bls.n	80034bc <HAL_DMAEx_MultiBufferStart_IT+0xa30>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5f      	ldr	r2, [pc, #380]	; (800357c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d057      	beq.n	80034b4 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a5d      	ldr	r2, [pc, #372]	; (8003580 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d050      	beq.n	80034b0 <HAL_DMAEx_MultiBufferStart_IT+0xa24>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d049      	beq.n	80034ac <HAL_DMAEx_MultiBufferStart_IT+0xa20>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5a      	ldr	r2, [pc, #360]	; (8003588 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d042      	beq.n	80034a8 <HAL_DMAEx_MultiBufferStart_IT+0xa1c>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a59      	ldr	r2, [pc, #356]	; (800358c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d03a      	beq.n	80034a2 <HAL_DMAEx_MultiBufferStart_IT+0xa16>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d032      	beq.n	800349c <HAL_DMAEx_MultiBufferStart_IT+0xa10>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a56      	ldr	r2, [pc, #344]	; (8003594 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d02a      	beq.n	8003496 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a54      	ldr	r2, [pc, #336]	; (8003598 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d022      	beq.n	8003490 <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a53      	ldr	r2, [pc, #332]	; (800359c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d01a      	beq.n	800348a <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a51      	ldr	r2, [pc, #324]	; (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d012      	beq.n	8003484 <HAL_DMAEx_MultiBufferStart_IT+0x9f8>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a50      	ldr	r2, [pc, #320]	; (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00a      	beq.n	800347e <HAL_DMAEx_MultiBufferStart_IT+0x9f2>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a4e      	ldr	r2, [pc, #312]	; (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d102      	bne.n	8003478 <HAL_DMAEx_MultiBufferStart_IT+0x9ec>
 8003472:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003476:	e01e      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800347c:	e01b      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800347e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003482:	e018      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003484:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003488:	e015      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800348a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800348e:	e012      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003494:	e00f      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 8003496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800349a:	e00c      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 800349c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a0:	e009      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034a6:	e006      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034a8:	2308      	movs	r3, #8
 80034aa:	e004      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034ac:	2308      	movs	r3, #8
 80034ae:	e002      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034b0:	2308      	movs	r3, #8
 80034b2:	e000      	b.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0xa2a>
 80034b4:	2308      	movs	r3, #8
 80034b6:	4a3f      	ldr	r2, [pc, #252]	; (80035b4 <HAL_DMAEx_MultiBufferStart_IT+0xb28>)
 80034b8:	60d3      	str	r3, [r2, #12]
 80034ba:	e080      	b.n	80035be <HAL_DMAEx_MultiBufferStart_IT+0xb32>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2e      	ldr	r2, [pc, #184]	; (800357c <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d078      	beq.n	80035b8 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d050      	beq.n	8003572 <HAL_DMAEx_MultiBufferStart_IT+0xae6>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2b      	ldr	r2, [pc, #172]	; (8003584 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d049      	beq.n	800356e <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d042      	beq.n	800356a <HAL_DMAEx_MultiBufferStart_IT+0xade>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a28      	ldr	r2, [pc, #160]	; (800358c <HAL_DMAEx_MultiBufferStart_IT+0xb00>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d03a      	beq.n	8003564 <HAL_DMAEx_MultiBufferStart_IT+0xad8>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a27      	ldr	r2, [pc, #156]	; (8003590 <HAL_DMAEx_MultiBufferStart_IT+0xb04>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d032      	beq.n	800355e <HAL_DMAEx_MultiBufferStart_IT+0xad2>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a25      	ldr	r2, [pc, #148]	; (8003594 <HAL_DMAEx_MultiBufferStart_IT+0xb08>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d02a      	beq.n	8003558 <HAL_DMAEx_MultiBufferStart_IT+0xacc>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a24      	ldr	r2, [pc, #144]	; (8003598 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d022      	beq.n	8003552 <HAL_DMAEx_MultiBufferStart_IT+0xac6>
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a22      	ldr	r2, [pc, #136]	; (800359c <HAL_DMAEx_MultiBufferStart_IT+0xb10>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01a      	beq.n	800354c <HAL_DMAEx_MultiBufferStart_IT+0xac0>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a21      	ldr	r2, [pc, #132]	; (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0xb14>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d012      	beq.n	8003546 <HAL_DMAEx_MultiBufferStart_IT+0xaba>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0xb18>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00a      	beq.n	8003540 <HAL_DMAEx_MultiBufferStart_IT+0xab4>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a1e      	ldr	r2, [pc, #120]	; (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0xb1c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d102      	bne.n	800353a <HAL_DMAEx_MultiBufferStart_IT+0xaae>
 8003534:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003538:	e03f      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800353a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800353e:	e03c      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003540:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003544:	e039      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003546:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800354a:	e036      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800354c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003550:	e033      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003556:	e030      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800355c:	e02d      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800355e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003562:	e02a      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003568:	e027      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800356a:	2308      	movs	r3, #8
 800356c:	e025      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 800356e:	2308      	movs	r3, #8
 8003570:	e023      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003572:	2308      	movs	r3, #8
 8003574:	e021      	b.n	80035ba <HAL_DMAEx_MultiBufferStart_IT+0xb2e>
 8003576:	bf00      	nop
 8003578:	400260b8 	.word	0x400260b8
 800357c:	40026010 	.word	0x40026010
 8003580:	40026410 	.word	0x40026410
 8003584:	40026070 	.word	0x40026070
 8003588:	40026470 	.word	0x40026470
 800358c:	40026028 	.word	0x40026028
 8003590:	40026428 	.word	0x40026428
 8003594:	40026088 	.word	0x40026088
 8003598:	40026488 	.word	0x40026488
 800359c:	40026040 	.word	0x40026040
 80035a0:	40026440 	.word	0x40026440
 80035a4:	400260a0 	.word	0x400260a0
 80035a8:	400264a0 	.word	0x400264a0
 80035ac:	40026400 	.word	0x40026400
 80035b0:	40026058 	.word	0x40026058
 80035b4:	40026000 	.word	0x40026000
 80035b8:	2308      	movs	r3, #8
 80035ba:	4a9a      	ldr	r2, [pc, #616]	; (8003824 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 80035bc:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b98      	ldr	r3, [pc, #608]	; (8003828 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>)
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d960      	bls.n	800368c <HAL_DMAEx_MultiBufferStart_IT+0xc00>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a97      	ldr	r2, [pc, #604]	; (800382c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d057      	beq.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a95      	ldr	r2, [pc, #596]	; (8003830 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d050      	beq.n	8003680 <HAL_DMAEx_MultiBufferStart_IT+0xbf4>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a94      	ldr	r2, [pc, #592]	; (8003834 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d049      	beq.n	800367c <HAL_DMAEx_MultiBufferStart_IT+0xbf0>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a92      	ldr	r2, [pc, #584]	; (8003838 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d042      	beq.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0xbec>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a91      	ldr	r2, [pc, #580]	; (800383c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d03a      	beq.n	8003672 <HAL_DMAEx_MultiBufferStart_IT+0xbe6>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a8f      	ldr	r2, [pc, #572]	; (8003840 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d032      	beq.n	800366c <HAL_DMAEx_MultiBufferStart_IT+0xbe0>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a8e      	ldr	r2, [pc, #568]	; (8003844 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d02a      	beq.n	8003666 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a8c      	ldr	r2, [pc, #560]	; (8003848 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d022      	beq.n	8003660 <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a8b      	ldr	r2, [pc, #556]	; (800384c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d01a      	beq.n	800365a <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a89      	ldr	r2, [pc, #548]	; (8003850 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d012      	beq.n	8003654 <HAL_DMAEx_MultiBufferStart_IT+0xbc8>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a88      	ldr	r2, [pc, #544]	; (8003854 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d00a      	beq.n	800364e <HAL_DMAEx_MultiBufferStart_IT+0xbc2>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a86      	ldr	r2, [pc, #536]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d102      	bne.n	8003648 <HAL_DMAEx_MultiBufferStart_IT+0xbbc>
 8003642:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003646:	e01e      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003648:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800364c:	e01b      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800364e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003652:	e018      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003654:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003658:	e015      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800365a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800365e:	e012      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003664:	e00f      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003666:	f44f 7380 	mov.w	r3, #256	; 0x100
 800366a:	e00c      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800366c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003670:	e009      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003672:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003676:	e006      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003678:	2304      	movs	r3, #4
 800367a:	e004      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 800367c:	2304      	movs	r3, #4
 800367e:	e002      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003680:	2304      	movs	r3, #4
 8003682:	e000      	b.n	8003686 <HAL_DMAEx_MultiBufferStart_IT+0xbfa>
 8003684:	2304      	movs	r3, #4
 8003686:	4a75      	ldr	r2, [pc, #468]	; (800385c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003688:	60d3      	str	r3, [r2, #12]
 800368a:	e151      	b.n	8003930 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	4b73      	ldr	r3, [pc, #460]	; (8003860 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d960      	bls.n	800375a <HAL_DMAEx_MultiBufferStart_IT+0xcce>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a63      	ldr	r2, [pc, #396]	; (800382c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d057      	beq.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a62      	ldr	r2, [pc, #392]	; (8003830 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d050      	beq.n	800374e <HAL_DMAEx_MultiBufferStart_IT+0xcc2>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a60      	ldr	r2, [pc, #384]	; (8003834 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d049      	beq.n	800374a <HAL_DMAEx_MultiBufferStart_IT+0xcbe>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a5f      	ldr	r2, [pc, #380]	; (8003838 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d042      	beq.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0xcba>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5d      	ldr	r2, [pc, #372]	; (800383c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d03a      	beq.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0xcb4>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d032      	beq.n	800373a <HAL_DMAEx_MultiBufferStart_IT+0xcae>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5a      	ldr	r2, [pc, #360]	; (8003844 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d02a      	beq.n	8003734 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a59      	ldr	r2, [pc, #356]	; (8003848 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d022      	beq.n	800372e <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a57      	ldr	r2, [pc, #348]	; (800384c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d01a      	beq.n	8003728 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a56      	ldr	r2, [pc, #344]	; (8003850 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d012      	beq.n	8003722 <HAL_DMAEx_MultiBufferStart_IT+0xc96>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a54      	ldr	r2, [pc, #336]	; (8003854 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00a      	beq.n	800371c <HAL_DMAEx_MultiBufferStart_IT+0xc90>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a53      	ldr	r2, [pc, #332]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d102      	bne.n	8003716 <HAL_DMAEx_MultiBufferStart_IT+0xc8a>
 8003710:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003714:	e01e      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003716:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371a:	e01b      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800371c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003720:	e018      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003722:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003726:	e015      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003728:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800372c:	e012      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800372e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003732:	e00f      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003738:	e00c      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800373a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800373e:	e009      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003740:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003744:	e006      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003746:	2304      	movs	r3, #4
 8003748:	e004      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800374a:	2304      	movs	r3, #4
 800374c:	e002      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 800374e:	2304      	movs	r3, #4
 8003750:	e000      	b.n	8003754 <HAL_DMAEx_MultiBufferStart_IT+0xcc8>
 8003752:	2304      	movs	r3, #4
 8003754:	4a41      	ldr	r2, [pc, #260]	; (800385c <HAL_DMAEx_MultiBufferStart_IT+0xdd0>)
 8003756:	6093      	str	r3, [r2, #8]
 8003758:	e0ea      	b.n	8003930 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	461a      	mov	r2, r3
 8003760:	4b40      	ldr	r3, [pc, #256]	; (8003864 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>)
 8003762:	429a      	cmp	r2, r3
 8003764:	f240 8084 	bls.w	8003870 <HAL_DMAEx_MultiBufferStart_IT+0xde4>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2f      	ldr	r2, [pc, #188]	; (800382c <HAL_DMAEx_MultiBufferStart_IT+0xda0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d07a      	beq.n	8003868 <HAL_DMAEx_MultiBufferStart_IT+0xddc>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2e      	ldr	r2, [pc, #184]	; (8003830 <HAL_DMAEx_MultiBufferStart_IT+0xda4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d050      	beq.n	800381e <HAL_DMAEx_MultiBufferStart_IT+0xd92>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2c      	ldr	r2, [pc, #176]	; (8003834 <HAL_DMAEx_MultiBufferStart_IT+0xda8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d049      	beq.n	800381a <HAL_DMAEx_MultiBufferStart_IT+0xd8e>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2b      	ldr	r2, [pc, #172]	; (8003838 <HAL_DMAEx_MultiBufferStart_IT+0xdac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d042      	beq.n	8003816 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a29      	ldr	r2, [pc, #164]	; (800383c <HAL_DMAEx_MultiBufferStart_IT+0xdb0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d03a      	beq.n	8003810 <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a28      	ldr	r2, [pc, #160]	; (8003840 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d032      	beq.n	800380a <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a26      	ldr	r2, [pc, #152]	; (8003844 <HAL_DMAEx_MultiBufferStart_IT+0xdb8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d02a      	beq.n	8003804 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a25      	ldr	r2, [pc, #148]	; (8003848 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d022      	beq.n	80037fe <HAL_DMAEx_MultiBufferStart_IT+0xd72>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a23      	ldr	r2, [pc, #140]	; (800384c <HAL_DMAEx_MultiBufferStart_IT+0xdc0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d01a      	beq.n	80037f8 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a22      	ldr	r2, [pc, #136]	; (8003850 <HAL_DMAEx_MultiBufferStart_IT+0xdc4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d012      	beq.n	80037f2 <HAL_DMAEx_MultiBufferStart_IT+0xd66>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a20      	ldr	r2, [pc, #128]	; (8003854 <HAL_DMAEx_MultiBufferStart_IT+0xdc8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00a      	beq.n	80037ec <HAL_DMAEx_MultiBufferStart_IT+0xd60>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d102      	bne.n	80037e6 <HAL_DMAEx_MultiBufferStart_IT+0xd5a>
 80037e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037e4:	e041      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037ea:	e03e      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037f0:	e03b      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037f6:	e038      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037fc:	e035      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 80037fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003802:	e032      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003808:	e02f      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800380a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800380e:	e02c      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003814:	e029      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003816:	2304      	movs	r3, #4
 8003818:	e027      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800381a:	2304      	movs	r3, #4
 800381c:	e025      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 800381e:	2304      	movs	r3, #4
 8003820:	e023      	b.n	800386a <HAL_DMAEx_MultiBufferStart_IT+0xdde>
 8003822:	bf00      	nop
 8003824:	40026000 	.word	0x40026000
 8003828:	40026458 	.word	0x40026458
 800382c:	40026010 	.word	0x40026010
 8003830:	40026410 	.word	0x40026410
 8003834:	40026070 	.word	0x40026070
 8003838:	40026470 	.word	0x40026470
 800383c:	40026028 	.word	0x40026028
 8003840:	40026428 	.word	0x40026428
 8003844:	40026088 	.word	0x40026088
 8003848:	40026488 	.word	0x40026488
 800384c:	40026040 	.word	0x40026040
 8003850:	40026440 	.word	0x40026440
 8003854:	400260a0 	.word	0x400260a0
 8003858:	400264a0 	.word	0x400264a0
 800385c:	40026400 	.word	0x40026400
 8003860:	400260b8 	.word	0x400260b8
 8003864:	40026058 	.word	0x40026058
 8003868:	2304      	movs	r3, #4
 800386a:	4a94      	ldr	r2, [pc, #592]	; (8003abc <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800386c:	60d3      	str	r3, [r2, #12]
 800386e:	e05f      	b.n	8003930 <HAL_DMAEx_MultiBufferStart_IT+0xea4>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a92      	ldr	r2, [pc, #584]	; (8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d057      	beq.n	800392a <HAL_DMAEx_MultiBufferStart_IT+0xe9e>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a91      	ldr	r2, [pc, #580]	; (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d050      	beq.n	8003926 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a8f      	ldr	r2, [pc, #572]	; (8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d049      	beq.n	8003922 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a8e      	ldr	r2, [pc, #568]	; (8003acc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d042      	beq.n	800391e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a8c      	ldr	r2, [pc, #560]	; (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03a      	beq.n	8003918 <HAL_DMAEx_MultiBufferStart_IT+0xe8c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a8b      	ldr	r2, [pc, #556]	; (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d032      	beq.n	8003912 <HAL_DMAEx_MultiBufferStart_IT+0xe86>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a89      	ldr	r2, [pc, #548]	; (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d02a      	beq.n	800390c <HAL_DMAEx_MultiBufferStart_IT+0xe80>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a88      	ldr	r2, [pc, #544]	; (8003adc <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_DMAEx_MultiBufferStart_IT+0xe7a>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a86      	ldr	r2, [pc, #536]	; (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01a      	beq.n	8003900 <HAL_DMAEx_MultiBufferStart_IT+0xe74>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a85      	ldr	r2, [pc, #532]	; (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d012      	beq.n	80038fa <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a83      	ldr	r2, [pc, #524]	; (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00a      	beq.n	80038f4 <HAL_DMAEx_MultiBufferStart_IT+0xe68>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a82      	ldr	r2, [pc, #520]	; (8003aec <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d102      	bne.n	80038ee <HAL_DMAEx_MultiBufferStart_IT+0xe62>
 80038e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038ec:	e01e      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f2:	e01b      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038f8:	e018      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 80038fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038fe:	e015      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003900:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003904:	e012      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003906:	f44f 7380 	mov.w	r3, #256	; 0x100
 800390a:	e00f      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800390c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003910:	e00c      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003912:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003916:	e009      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800391c:	e006      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800391e:	2304      	movs	r3, #4
 8003920:	e004      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003922:	2304      	movs	r3, #4
 8003924:	e002      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003926:	2304      	movs	r3, #4
 8003928:	e000      	b.n	800392c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 800392a:	2304      	movs	r3, #4
 800392c:	4a63      	ldr	r2, [pc, #396]	; (8003abc <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800392e:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	461a      	mov	r2, r3
 8003936:	4b6e      	ldr	r3, [pc, #440]	; (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0x1064>)
 8003938:	429a      	cmp	r2, r3
 800393a:	d95c      	bls.n	80039f6 <HAL_DMAEx_MultiBufferStart_IT+0xf6a>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a5f      	ldr	r2, [pc, #380]	; (8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d053      	beq.n	80039ee <HAL_DMAEx_MultiBufferStart_IT+0xf62>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a5e      	ldr	r2, [pc, #376]	; (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d04c      	beq.n	80039ea <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a5c      	ldr	r2, [pc, #368]	; (8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d045      	beq.n	80039e6 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a5b      	ldr	r2, [pc, #364]	; (8003acc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d03e      	beq.n	80039e2 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a59      	ldr	r2, [pc, #356]	; (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d037      	beq.n	80039de <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a58      	ldr	r2, [pc, #352]	; (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d030      	beq.n	80039da <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a56      	ldr	r2, [pc, #344]	; (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d029      	beq.n	80039d6 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a55      	ldr	r2, [pc, #340]	; (8003adc <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d022      	beq.n	80039d2 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a53      	ldr	r2, [pc, #332]	; (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d01a      	beq.n	80039cc <HAL_DMAEx_MultiBufferStart_IT+0xf40>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a52      	ldr	r2, [pc, #328]	; (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d012      	beq.n	80039c6 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a50      	ldr	r2, [pc, #320]	; (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00a      	beq.n	80039c0 <HAL_DMAEx_MultiBufferStart_IT+0xf34>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a4f      	ldr	r2, [pc, #316]	; (8003aec <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d102      	bne.n	80039ba <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 80039b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039b8:	e01a      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80039be:	e017      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039c4:	e014      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039ca:	e011      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039d0:	e00e      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039d2:	2340      	movs	r3, #64	; 0x40
 80039d4:	e00c      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039d6:	2340      	movs	r3, #64	; 0x40
 80039d8:	e00a      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039da:	2340      	movs	r3, #64	; 0x40
 80039dc:	e008      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039de:	2340      	movs	r3, #64	; 0x40
 80039e0:	e006      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e004      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e002      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_DMAEx_MultiBufferStart_IT+0xf64>
 80039ee:	2301      	movs	r3, #1
 80039f0:	4a40      	ldr	r2, [pc, #256]	; (8003af4 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 80039f2:	60d3      	str	r3, [r2, #12]
 80039f4:	e141      	b.n	8003c7a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	4b3e      	ldr	r3, [pc, #248]	; (8003af8 <HAL_DMAEx_MultiBufferStart_IT+0x106c>)
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d97c      	bls.n	8003afc <HAL_DMAEx_MultiBufferStart_IT+0x1070>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a2e      	ldr	r2, [pc, #184]	; (8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d053      	beq.n	8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a2c      	ldr	r2, [pc, #176]	; (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d04c      	beq.n	8003ab0 <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a2b      	ldr	r2, [pc, #172]	; (8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d045      	beq.n	8003aac <HAL_DMAEx_MultiBufferStart_IT+0x1020>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a29      	ldr	r2, [pc, #164]	; (8003acc <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d03e      	beq.n	8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0x101c>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a28      	ldr	r2, [pc, #160]	; (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d037      	beq.n	8003aa4 <HAL_DMAEx_MultiBufferStart_IT+0x1018>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a26      	ldr	r2, [pc, #152]	; (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0x1048>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d030      	beq.n	8003aa0 <HAL_DMAEx_MultiBufferStart_IT+0x1014>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a25      	ldr	r2, [pc, #148]	; (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0x104c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d029      	beq.n	8003a9c <HAL_DMAEx_MultiBufferStart_IT+0x1010>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a23      	ldr	r2, [pc, #140]	; (8003adc <HAL_DMAEx_MultiBufferStart_IT+0x1050>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d022      	beq.n	8003a98 <HAL_DMAEx_MultiBufferStart_IT+0x100c>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a22      	ldr	r2, [pc, #136]	; (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0x1054>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d01a      	beq.n	8003a92 <HAL_DMAEx_MultiBufferStart_IT+0x1006>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a20      	ldr	r2, [pc, #128]	; (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0x1058>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d012      	beq.n	8003a8c <HAL_DMAEx_MultiBufferStart_IT+0x1000>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1f      	ldr	r2, [pc, #124]	; (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0x105c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d00a      	beq.n	8003a86 <HAL_DMAEx_MultiBufferStart_IT+0xffa>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1d      	ldr	r2, [pc, #116]	; (8003aec <HAL_DMAEx_MultiBufferStart_IT+0x1060>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d102      	bne.n	8003a80 <HAL_DMAEx_MultiBufferStart_IT+0xff4>
 8003a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a7e:	e01a      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003a84:	e017      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a8a:	e014      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a90:	e011      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a96:	e00e      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a98:	2340      	movs	r3, #64	; 0x40
 8003a9a:	e00c      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003a9c:	2340      	movs	r3, #64	; 0x40
 8003a9e:	e00a      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003aa0:	2340      	movs	r3, #64	; 0x40
 8003aa2:	e008      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003aa4:	2340      	movs	r3, #64	; 0x40
 8003aa6:	e006      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e004      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003aac:	2301      	movs	r3, #1
 8003aae:	e002      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_DMAEx_MultiBufferStart_IT+0x102a>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	4a0f      	ldr	r2, [pc, #60]	; (8003af4 <HAL_DMAEx_MultiBufferStart_IT+0x1068>)
 8003ab8:	6093      	str	r3, [r2, #8]
 8003aba:	e0de      	b.n	8003c7a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003abc:	40026000 	.word	0x40026000
 8003ac0:	40026010 	.word	0x40026010
 8003ac4:	40026410 	.word	0x40026410
 8003ac8:	40026070 	.word	0x40026070
 8003acc:	40026470 	.word	0x40026470
 8003ad0:	40026028 	.word	0x40026028
 8003ad4:	40026428 	.word	0x40026428
 8003ad8:	40026088 	.word	0x40026088
 8003adc:	40026488 	.word	0x40026488
 8003ae0:	40026040 	.word	0x40026040
 8003ae4:	40026440 	.word	0x40026440
 8003ae8:	400260a0 	.word	0x400260a0
 8003aec:	400264a0 	.word	0x400264a0
 8003af0:	40026458 	.word	0x40026458
 8003af4:	40026400 	.word	0x40026400
 8003af8:	400260b8 	.word	0x400260b8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	4b78      	ldr	r3, [pc, #480]	; (8003ce4 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d95c      	bls.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0x1136>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a76      	ldr	r2, [pc, #472]	; (8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d053      	beq.n	8003bba <HAL_DMAEx_MultiBufferStart_IT+0x112e>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a75      	ldr	r2, [pc, #468]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d04c      	beq.n	8003bb6 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a73      	ldr	r2, [pc, #460]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d045      	beq.n	8003bb2 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a72      	ldr	r2, [pc, #456]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d03e      	beq.n	8003bae <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a70      	ldr	r2, [pc, #448]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d037      	beq.n	8003baa <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a6f      	ldr	r2, [pc, #444]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d030      	beq.n	8003ba6 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a6d      	ldr	r2, [pc, #436]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d029      	beq.n	8003ba2 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6c      	ldr	r2, [pc, #432]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d022      	beq.n	8003b9e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a6a      	ldr	r2, [pc, #424]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01a      	beq.n	8003b98 <HAL_DMAEx_MultiBufferStart_IT+0x110c>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a69      	ldr	r2, [pc, #420]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d012      	beq.n	8003b92 <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a67      	ldr	r2, [pc, #412]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00a      	beq.n	8003b8c <HAL_DMAEx_MultiBufferStart_IT+0x1100>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a66      	ldr	r2, [pc, #408]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d102      	bne.n	8003b86 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8003b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b84:	e01a      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003b8a:	e017      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b90:	e014      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b96:	e011      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b9c:	e00e      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003b9e:	2340      	movs	r3, #64	; 0x40
 8003ba0:	e00c      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003ba2:	2340      	movs	r3, #64	; 0x40
 8003ba4:	e00a      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003ba6:	2340      	movs	r3, #64	; 0x40
 8003ba8:	e008      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003baa:	2340      	movs	r3, #64	; 0x40
 8003bac:	e006      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e004      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e002      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0x1130>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	4a56      	ldr	r2, [pc, #344]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003bbe:	60d3      	str	r3, [r2, #12]
 8003bc0:	e05b      	b.n	8003c7a <HAL_DMAEx_MultiBufferStart_IT+0x11ee>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a48      	ldr	r2, [pc, #288]	; (8003ce8 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d053      	beq.n	8003c74 <HAL_DMAEx_MultiBufferStart_IT+0x11e8>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a46      	ldr	r2, [pc, #280]	; (8003cec <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d04c      	beq.n	8003c70 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a45      	ldr	r2, [pc, #276]	; (8003cf0 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d045      	beq.n	8003c6c <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a43      	ldr	r2, [pc, #268]	; (8003cf4 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d03e      	beq.n	8003c68 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a42      	ldr	r2, [pc, #264]	; (8003cf8 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d037      	beq.n	8003c64 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d030      	beq.n	8003c60 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a3f      	ldr	r2, [pc, #252]	; (8003d00 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d029      	beq.n	8003c5c <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a3d      	ldr	r2, [pc, #244]	; (8003d04 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3c      	ldr	r2, [pc, #240]	; (8003d08 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01a      	beq.n	8003c52 <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a3a      	ldr	r2, [pc, #232]	; (8003d0c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d012      	beq.n	8003c4c <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a39      	ldr	r2, [pc, #228]	; (8003d10 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d00a      	beq.n	8003c46 <HAL_DMAEx_MultiBufferStart_IT+0x11ba>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a37      	ldr	r2, [pc, #220]	; (8003d14 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d102      	bne.n	8003c40 <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 8003c3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c3e:	e01a      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c40:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c44:	e017      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c4a:	e014      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c50:	e011      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c56:	e00e      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c58:	2340      	movs	r3, #64	; 0x40
 8003c5a:	e00c      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c5c:	2340      	movs	r3, #64	; 0x40
 8003c5e:	e00a      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c60:	2340      	movs	r3, #64	; 0x40
 8003c62:	e008      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c64:	2340      	movs	r3, #64	; 0x40
 8003c66:	e006      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e004      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e002      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003c74:	2301      	movs	r3, #1
 8003c76:	4a28      	ldr	r2, [pc, #160]	; (8003d18 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003c78:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0216 	orr.w	r2, r2, #22
 8003c88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695a      	ldr	r2, [r3, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <HAL_DMAEx_MultiBufferStart_IT+0x121e>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_DMAEx_MultiBufferStart_IT+0x122e>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0208 	orr.w	r2, r2, #8
 8003cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e005      	b.n	8003cd8 <HAL_DMAEx_MultiBufferStart_IT+0x124c>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3718      	adds	r7, #24
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40026058 	.word	0x40026058
 8003ce8:	40026010 	.word	0x40026010
 8003cec:	40026410 	.word	0x40026410
 8003cf0:	40026070 	.word	0x40026070
 8003cf4:	40026470 	.word	0x40026470
 8003cf8:	40026028 	.word	0x40026028
 8003cfc:	40026428 	.word	0x40026428
 8003d00:	40026088 	.word	0x40026088
 8003d04:	40026488 	.word	0x40026488
 8003d08:	40026040 	.word	0x40026040
 8003d0c:	40026440 	.word	0x40026440
 8003d10:	400260a0 	.word	0x400260a0
 8003d14:	400264a0 	.word	0x400264a0
 8003d18:	40026000 	.word	0x40026000

08003d1c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b085      	sub	sp, #20
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	4613      	mov	r3, r2
 8003d28:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68ba      	ldr	r2, [r7, #8]
 8003d36:	60da      	str	r2, [r3, #12]
 8003d38:	e003      	b.n	8003d42 <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	68ba      	ldr	r2, [r7, #8]
 8003d40:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	d108      	bne.n	8003d80 <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d7e:	e007      	b.n	8003d90 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	e16b      	b.n	8004090 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003db8:	2201      	movs	r2, #1
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	4013      	ands	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	f040 815a 	bne.w	800408a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d005      	beq.n	8003dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d130      	bne.n	8003e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	2203      	movs	r2, #3
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e24:	2201      	movs	r2, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	43db      	mvns	r3, r3
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	4013      	ands	r3, r2
 8003e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	091b      	lsrs	r3, r3, #4
 8003e3a:	f003 0201 	and.w	r2, r3, #1
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	f003 0303 	and.w	r3, r3, #3
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d017      	beq.n	8003e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	2203      	movs	r2, #3
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	43db      	mvns	r3, r3
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 0303 	and.w	r3, r3, #3
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d123      	bne.n	8003ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	08da      	lsrs	r2, r3, #3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3208      	adds	r2, #8
 8003ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	220f      	movs	r2, #15
 8003eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb4:	43db      	mvns	r3, r3
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	691a      	ldr	r2, [r3, #16]
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	08da      	lsrs	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	69b9      	ldr	r1, [r7, #24]
 8003edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	2203      	movs	r2, #3
 8003eec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0203 	and.w	r2, r3, #3
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 80b4 	beq.w	800408a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	4a5f      	ldr	r2, [pc, #380]	; (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f30:	6453      	str	r3, [r2, #68]	; 0x44
 8003f32:	4b5d      	ldr	r3, [pc, #372]	; (80040a8 <HAL_GPIO_Init+0x30c>)
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f3e:	4a5b      	ldr	r2, [pc, #364]	; (80040ac <HAL_GPIO_Init+0x310>)
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	089b      	lsrs	r3, r3, #2
 8003f44:	3302      	adds	r3, #2
 8003f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	220f      	movs	r2, #15
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a52      	ldr	r2, [pc, #328]	; (80040b0 <HAL_GPIO_Init+0x314>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d02b      	beq.n	8003fc2 <HAL_GPIO_Init+0x226>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a51      	ldr	r2, [pc, #324]	; (80040b4 <HAL_GPIO_Init+0x318>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d025      	beq.n	8003fbe <HAL_GPIO_Init+0x222>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a50      	ldr	r2, [pc, #320]	; (80040b8 <HAL_GPIO_Init+0x31c>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01f      	beq.n	8003fba <HAL_GPIO_Init+0x21e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a4f      	ldr	r2, [pc, #316]	; (80040bc <HAL_GPIO_Init+0x320>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d019      	beq.n	8003fb6 <HAL_GPIO_Init+0x21a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a4e      	ldr	r2, [pc, #312]	; (80040c0 <HAL_GPIO_Init+0x324>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_GPIO_Init+0x216>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4d      	ldr	r2, [pc, #308]	; (80040c4 <HAL_GPIO_Init+0x328>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00d      	beq.n	8003fae <HAL_GPIO_Init+0x212>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a4c      	ldr	r2, [pc, #304]	; (80040c8 <HAL_GPIO_Init+0x32c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <HAL_GPIO_Init+0x20e>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4b      	ldr	r2, [pc, #300]	; (80040cc <HAL_GPIO_Init+0x330>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d101      	bne.n	8003fa6 <HAL_GPIO_Init+0x20a>
 8003fa2:	2307      	movs	r3, #7
 8003fa4:	e00e      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fa6:	2308      	movs	r3, #8
 8003fa8:	e00c      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003faa:	2306      	movs	r3, #6
 8003fac:	e00a      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fae:	2305      	movs	r3, #5
 8003fb0:	e008      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	e006      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e004      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e002      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_Init+0x228>
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	69fa      	ldr	r2, [r7, #28]
 8003fc6:	f002 0203 	and.w	r2, r2, #3
 8003fca:	0092      	lsls	r2, r2, #2
 8003fcc:	4093      	lsls	r3, r2
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fd4:	4935      	ldr	r1, [pc, #212]	; (80040ac <HAL_GPIO_Init+0x310>)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe2:	4b3b      	ldr	r3, [pc, #236]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004006:	4a32      	ldr	r2, [pc, #200]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800400c:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <HAL_GPIO_Init+0x334>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004036:	4b26      	ldr	r3, [pc, #152]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	43db      	mvns	r3, r3
 8004040:	69ba      	ldr	r2, [r7, #24]
 8004042:	4013      	ands	r3, r2
 8004044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_GPIO_Init+0x334>)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004084:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <HAL_GPIO_Init+0x334>)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	3301      	adds	r3, #1
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b0f      	cmp	r3, #15
 8004094:	f67f ae90 	bls.w	8003db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004098:	bf00      	nop
 800409a:	bf00      	nop
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800
 80040ac:	40013800 	.word	0x40013800
 80040b0:	40020000 	.word	0x40020000
 80040b4:	40020400 	.word	0x40020400
 80040b8:	40020800 	.word	0x40020800
 80040bc:	40020c00 	.word	0x40020c00
 80040c0:	40021000 	.word	0x40021000
 80040c4:	40021400 	.word	0x40021400
 80040c8:	40021800 	.word	0x40021800
 80040cc:	40021c00 	.word	0x40021c00
 80040d0:	40013c00 	.word	0x40013c00

080040d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	807b      	strh	r3, [r7, #2]
 80040e0:	4613      	mov	r3, r2
 80040e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040e4:	787b      	ldrb	r3, [r7, #1]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040ea:	887a      	ldrh	r2, [r7, #2]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040f0:	e003      	b.n	80040fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	619a      	str	r2, [r3, #24]
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
	...

08004108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e12b      	b.n	8004372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f7fd fb3c 	bl	80017ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2224      	movs	r2, #36	; 0x24
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f022 0201 	bic.w	r2, r2, #1
 800414a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800415a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800416a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800416c:	f001 f8dc 	bl	8005328 <HAL_RCC_GetPCLK1Freq>
 8004170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	4a81      	ldr	r2, [pc, #516]	; (800437c <HAL_I2C_Init+0x274>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d807      	bhi.n	800418c <HAL_I2C_Init+0x84>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a80      	ldr	r2, [pc, #512]	; (8004380 <HAL_I2C_Init+0x278>)
 8004180:	4293      	cmp	r3, r2
 8004182:	bf94      	ite	ls
 8004184:	2301      	movls	r3, #1
 8004186:	2300      	movhi	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e006      	b.n	800419a <HAL_I2C_Init+0x92>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	4a7d      	ldr	r2, [pc, #500]	; (8004384 <HAL_I2C_Init+0x27c>)
 8004190:	4293      	cmp	r3, r2
 8004192:	bf94      	ite	ls
 8004194:	2301      	movls	r3, #1
 8004196:	2300      	movhi	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e0e7      	b.n	8004372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	4a78      	ldr	r2, [pc, #480]	; (8004388 <HAL_I2C_Init+0x280>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0c9b      	lsrs	r3, r3, #18
 80041ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	430a      	orrs	r2, r1
 80041c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4a6a      	ldr	r2, [pc, #424]	; (800437c <HAL_I2C_Init+0x274>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d802      	bhi.n	80041dc <HAL_I2C_Init+0xd4>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	3301      	adds	r3, #1
 80041da:	e009      	b.n	80041f0 <HAL_I2C_Init+0xe8>
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	4a69      	ldr	r2, [pc, #420]	; (800438c <HAL_I2C_Init+0x284>)
 80041e8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ec:	099b      	lsrs	r3, r3, #6
 80041ee:	3301      	adds	r3, #1
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004202:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	495c      	ldr	r1, [pc, #368]	; (800437c <HAL_I2C_Init+0x274>)
 800420c:	428b      	cmp	r3, r1
 800420e:	d819      	bhi.n	8004244 <HAL_I2C_Init+0x13c>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	1e59      	subs	r1, r3, #1
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	fbb1 f3f3 	udiv	r3, r1, r3
 800421e:	1c59      	adds	r1, r3, #1
 8004220:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004224:	400b      	ands	r3, r1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_I2C_Init+0x138>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1e59      	subs	r1, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	fbb1 f3f3 	udiv	r3, r1, r3
 8004238:	3301      	adds	r3, #1
 800423a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423e:	e051      	b.n	80042e4 <HAL_I2C_Init+0x1dc>
 8004240:	2304      	movs	r3, #4
 8004242:	e04f      	b.n	80042e4 <HAL_I2C_Init+0x1dc>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d111      	bne.n	8004270 <HAL_I2C_Init+0x168>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	1e58      	subs	r0, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	440b      	add	r3, r1
 800425a:	fbb0 f3f3 	udiv	r3, r0, r3
 800425e:	3301      	adds	r3, #1
 8004260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004264:	2b00      	cmp	r3, #0
 8004266:	bf0c      	ite	eq
 8004268:	2301      	moveq	r3, #1
 800426a:	2300      	movne	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e012      	b.n	8004296 <HAL_I2C_Init+0x18e>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1e58      	subs	r0, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	460b      	mov	r3, r1
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	0099      	lsls	r1, r3, #2
 8004280:	440b      	add	r3, r1
 8004282:	fbb0 f3f3 	udiv	r3, r0, r3
 8004286:	3301      	adds	r3, #1
 8004288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_I2C_Init+0x196>
 800429a:	2301      	movs	r3, #1
 800429c:	e022      	b.n	80042e4 <HAL_I2C_Init+0x1dc>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10e      	bne.n	80042c4 <HAL_I2C_Init+0x1bc>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	1e58      	subs	r0, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	460b      	mov	r3, r1
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	440b      	add	r3, r1
 80042b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042b8:	3301      	adds	r3, #1
 80042ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c2:	e00f      	b.n	80042e4 <HAL_I2C_Init+0x1dc>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	1e58      	subs	r0, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6859      	ldr	r1, [r3, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	0099      	lsls	r1, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042da:	3301      	adds	r3, #1
 80042dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	6809      	ldr	r1, [r1, #0]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004312:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6911      	ldr	r1, [r2, #16]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68d2      	ldr	r2, [r2, #12]
 800431e:	4311      	orrs	r1, r2
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	430b      	orrs	r3, r1
 8004326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	000186a0 	.word	0x000186a0
 8004380:	001e847f 	.word	0x001e847f
 8004384:	003d08ff 	.word	0x003d08ff
 8004388:	431bde83 	.word	0x431bde83
 800438c:	10624dd3 	.word	0x10624dd3

08004390 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af02      	add	r7, sp, #8
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4603      	mov	r3, r0
 80043a0:	817b      	strh	r3, [r7, #10]
 80043a2:	460b      	mov	r3, r1
 80043a4:	813b      	strh	r3, [r7, #8]
 80043a6:	4613      	mov	r3, r2
 80043a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043aa:	f7fd fbb3 	bl	8001b14 <HAL_GetTick>
 80043ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b20      	cmp	r3, #32
 80043ba:	f040 80d9 	bne.w	8004570 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2319      	movs	r3, #25
 80043c4:	2201      	movs	r2, #1
 80043c6:	496d      	ldr	r1, [pc, #436]	; (800457c <HAL_I2C_Mem_Write+0x1ec>)
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f971 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
 80043d6:	e0cc      	b.n	8004572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d101      	bne.n	80043e6 <HAL_I2C_Mem_Write+0x56>
 80043e2:	2302      	movs	r3, #2
 80043e4:	e0c5      	b.n	8004572 <HAL_I2C_Mem_Write+0x1e2>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d007      	beq.n	800440c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800441a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2221      	movs	r2, #33	; 0x21
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2240      	movs	r2, #64	; 0x40
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a3a      	ldr	r2, [r7, #32]
 8004436:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800443c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004442:	b29a      	uxth	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	4a4d      	ldr	r2, [pc, #308]	; (8004580 <HAL_I2C_Mem_Write+0x1f0>)
 800444c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800444e:	88f8      	ldrh	r0, [r7, #6]
 8004450:	893a      	ldrh	r2, [r7, #8]
 8004452:	8979      	ldrh	r1, [r7, #10]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	9301      	str	r3, [sp, #4]
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	4603      	mov	r3, r0
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f890 	bl	8004584 <I2C_RequestMemoryWrite>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d052      	beq.n	8004510 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e081      	b.n	8004572 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f9f2 	bl	800485c <I2C_WaitOnTXEFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004482:	2b04      	cmp	r3, #4
 8004484:	d107      	bne.n	8004496 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004494:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e06b      	b.n	8004572 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449e:	781a      	ldrb	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	3b01      	subs	r3, #1
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d11b      	bne.n	8004510 <HAL_I2C_Mem_Write+0x180>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d017      	beq.n	8004510 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	781a      	ldrb	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	1c5a      	adds	r2, r3, #1
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b01      	subs	r3, #1
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1aa      	bne.n	800446e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f9de 	bl	80048de <I2C_WaitOnBTFFlagUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00d      	beq.n	8004544 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	2b04      	cmp	r3, #4
 800452e:	d107      	bne.n	8004540 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800453e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e016      	b.n	8004572 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2220      	movs	r2, #32
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800456c:	2300      	movs	r3, #0
 800456e:	e000      	b.n	8004572 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
  }
}
 8004572:	4618      	mov	r0, r3
 8004574:	3718      	adds	r7, #24
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	00100002 	.word	0x00100002
 8004580:	ffff0000 	.word	0xffff0000

08004584 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	4608      	mov	r0, r1
 800458e:	4611      	mov	r1, r2
 8004590:	461a      	mov	r2, r3
 8004592:	4603      	mov	r3, r0
 8004594:	817b      	strh	r3, [r7, #10]
 8004596:	460b      	mov	r3, r1
 8004598:	813b      	strh	r3, [r7, #8]
 800459a:	4613      	mov	r3, r2
 800459c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f878 	bl	80046b0 <I2C_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00d      	beq.n	80045e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d103      	bne.n	80045de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e05f      	b.n	80046a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045e2:	897b      	ldrh	r3, [r7, #10]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80045f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	492d      	ldr	r1, [pc, #180]	; (80046ac <I2C_RequestMemoryWrite+0x128>)
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f8b0 	bl	800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e04c      	b.n	80046a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	6a39      	ldr	r1, [r7, #32]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f91a 	bl	800485c <I2C_WaitOnTXEFlagUntilTimeout>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	2b04      	cmp	r3, #4
 8004634:	d107      	bne.n	8004646 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e02b      	b.n	80046a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800464a:	88fb      	ldrh	r3, [r7, #6]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d105      	bne.n	800465c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004650:	893b      	ldrh	r3, [r7, #8]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	611a      	str	r2, [r3, #16]
 800465a:	e021      	b.n	80046a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800465c:	893b      	ldrh	r3, [r7, #8]
 800465e:	0a1b      	lsrs	r3, r3, #8
 8004660:	b29b      	uxth	r3, r3
 8004662:	b2da      	uxtb	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800466a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800466c:	6a39      	ldr	r1, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f8f4 	bl	800485c <I2C_WaitOnTXEFlagUntilTimeout>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b04      	cmp	r3, #4
 8004680:	d107      	bne.n	8004692 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e005      	b.n	80046a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004696:	893b      	ldrh	r3, [r7, #8]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	00010002 	.word	0x00010002

080046b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	4613      	mov	r3, r2
 80046be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c0:	e025      	b.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c8:	d021      	beq.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fd fa23 	bl	8001b14 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e023      	b.n	8004756 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	0c1b      	lsrs	r3, r3, #16
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d10d      	bne.n	8004734 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	43da      	mvns	r2, r3
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4013      	ands	r3, r2
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf0c      	ite	eq
 800472a:	2301      	moveq	r3, #1
 800472c:	2300      	movne	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	e00c      	b.n	800474e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	43da      	mvns	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	4013      	ands	r3, r2
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	429a      	cmp	r2, r3
 8004752:	d0b6      	beq.n	80046c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	607a      	str	r2, [r7, #4]
 800476a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800476c:	e051      	b.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	695b      	ldr	r3, [r3, #20]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477c:	d123      	bne.n	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004796:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f043 0204 	orr.w	r2, r3, #4
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e046      	b.n	8004854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d021      	beq.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ce:	f7fd f9a1 	bl	8001b14 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d302      	bcc.n	80047e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d116      	bne.n	8004812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2220      	movs	r2, #32
 80047ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f043 0220 	orr.w	r2, r3, #32
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e020      	b.n	8004854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	0c1b      	lsrs	r3, r3, #16
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b01      	cmp	r3, #1
 800481a:	d10c      	bne.n	8004836 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	43da      	mvns	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4013      	ands	r3, r2
 8004828:	b29b      	uxth	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	bf14      	ite	ne
 800482e:	2301      	movne	r3, #1
 8004830:	2300      	moveq	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	e00b      	b.n	800484e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	43da      	mvns	r2, r3
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	4013      	ands	r3, r2
 8004842:	b29b      	uxth	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d18d      	bne.n	800476e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004868:	e02d      	b.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 f878 	bl	8004960 <I2C_IsAcknowledgeFailed>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e02d      	b.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d021      	beq.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004882:	f7fd f947 	bl	8001b14 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	429a      	cmp	r2, r3
 8004890:	d302      	bcc.n	8004898 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d116      	bne.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2220      	movs	r2, #32
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f043 0220 	orr.w	r2, r3, #32
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e007      	b.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d0:	2b80      	cmp	r3, #128	; 0x80
 80048d2:	d1ca      	bne.n	800486a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048ea:	e02d      	b.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f837 	bl	8004960 <I2C_IsAcknowledgeFailed>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e02d      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004902:	d021      	beq.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fd f906 	bl	8001b14 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d116      	bne.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b04      	cmp	r3, #4
 8004954:	d1ca      	bne.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004976:	d11b      	bne.n	80049b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004980:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f043 0204 	orr.w	r2, r3, #4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e264      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d075      	beq.n	8004aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049de:	4ba3      	ldr	r3, [pc, #652]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d00c      	beq.n	8004a04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ea:	4ba0      	ldr	r3, [pc, #640]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d112      	bne.n	8004a1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049f6:	4b9d      	ldr	r3, [pc, #628]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a02:	d10b      	bne.n	8004a1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	4b99      	ldr	r3, [pc, #612]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d05b      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x108>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d157      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e23f      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a24:	d106      	bne.n	8004a34 <HAL_RCC_OscConfig+0x74>
 8004a26:	4b91      	ldr	r3, [pc, #580]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a90      	ldr	r2, [pc, #576]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a30:	6013      	str	r3, [r2, #0]
 8004a32:	e01d      	b.n	8004a70 <HAL_RCC_OscConfig+0xb0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a3c:	d10c      	bne.n	8004a58 <HAL_RCC_OscConfig+0x98>
 8004a3e:	4b8b      	ldr	r3, [pc, #556]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a8a      	ldr	r2, [pc, #552]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a48:	6013      	str	r3, [r2, #0]
 8004a4a:	4b88      	ldr	r3, [pc, #544]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a87      	ldr	r2, [pc, #540]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	e00b      	b.n	8004a70 <HAL_RCC_OscConfig+0xb0>
 8004a58:	4b84      	ldr	r3, [pc, #528]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a83      	ldr	r2, [pc, #524]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	4b81      	ldr	r3, [pc, #516]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a80      	ldr	r2, [pc, #512]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d013      	beq.n	8004aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a78:	f7fd f84c 	bl	8001b14 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a80:	f7fd f848 	bl	8001b14 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b64      	cmp	r3, #100	; 0x64
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e204      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	4b76      	ldr	r3, [pc, #472]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0xc0>
 8004a9e:	e014      	b.n	8004aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7fd f838 	bl	8001b14 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7fd f834 	bl	8001b14 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e1f0      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	4b6c      	ldr	r3, [pc, #432]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0xe8>
 8004ac6:	e000      	b.n	8004aca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d063      	beq.n	8004b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ad6:	4b65      	ldr	r3, [pc, #404]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 030c 	and.w	r3, r3, #12
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ae2:	4b62      	ldr	r3, [pc, #392]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d11c      	bne.n	8004b28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004aee:	4b5f      	ldr	r3, [pc, #380]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d116      	bne.n	8004b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004afa:	4b5c      	ldr	r3, [pc, #368]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_RCC_OscConfig+0x152>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d001      	beq.n	8004b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e1c4      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b12:	4b56      	ldr	r3, [pc, #344]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4952      	ldr	r1, [pc, #328]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b26:	e03a      	b.n	8004b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b30:	4b4f      	ldr	r3, [pc, #316]	; (8004c70 <HAL_RCC_OscConfig+0x2b0>)
 8004b32:	2201      	movs	r2, #1
 8004b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b36:	f7fc ffed 	bl	8001b14 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b3e:	f7fc ffe9 	bl	8001b14 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e1a5      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b50:	4b46      	ldr	r3, [pc, #280]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5c:	4b43      	ldr	r3, [pc, #268]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4940      	ldr	r1, [pc, #256]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]
 8004b70:	e015      	b.n	8004b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b72:	4b3f      	ldr	r3, [pc, #252]	; (8004c70 <HAL_RCC_OscConfig+0x2b0>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fc ffcc 	bl	8001b14 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b80:	f7fc ffc8 	bl	8001b14 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e184      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b92:	4b36      	ldr	r3, [pc, #216]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0308 	and.w	r3, r3, #8
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d030      	beq.n	8004c0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d016      	beq.n	8004be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bb2:	4b30      	ldr	r3, [pc, #192]	; (8004c74 <HAL_RCC_OscConfig+0x2b4>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb8:	f7fc ffac 	bl	8001b14 <HAL_GetTick>
 8004bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bc0:	f7fc ffa8 	bl	8001b14 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e164      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd2:	4b26      	ldr	r3, [pc, #152]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d0f0      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x200>
 8004bde:	e015      	b.n	8004c0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004be0:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <HAL_RCC_OscConfig+0x2b4>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004be6:	f7fc ff95 	bl	8001b14 <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bee:	f7fc ff91 	bl	8001b14 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e14d      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c00:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f0      	bne.n	8004bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80a0 	beq.w	8004d5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d10f      	bne.n	8004c4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60bb      	str	r3, [r7, #8]
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	4a0e      	ldr	r2, [pc, #56]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6413      	str	r3, [r2, #64]	; 0x40
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c42:	60bb      	str	r3, [r7, #8]
 8004c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <HAL_RCC_OscConfig+0x2b8>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d121      	bne.n	8004c9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <HAL_RCC_OscConfig+0x2b8>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <HAL_RCC_OscConfig+0x2b8>)
 8004c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c62:	f7fc ff57 	bl	8001b14 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c68:	e011      	b.n	8004c8e <HAL_RCC_OscConfig+0x2ce>
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	42470000 	.word	0x42470000
 8004c74:	42470e80 	.word	0x42470e80
 8004c78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c7c:	f7fc ff4a 	bl	8001b14 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e106      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8e:	4b85      	ldr	r3, [pc, #532]	; (8004ea4 <HAL_RCC_OscConfig+0x4e4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d106      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x2f0>
 8004ca2:	4b81      	ldr	r3, [pc, #516]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca6:	4a80      	ldr	r2, [pc, #512]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	6713      	str	r3, [r2, #112]	; 0x70
 8004cae:	e01c      	b.n	8004cea <HAL_RCC_OscConfig+0x32a>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d10c      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x312>
 8004cb8:	4b7b      	ldr	r3, [pc, #492]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	4a7a      	ldr	r2, [pc, #488]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004cbe:	f043 0304 	orr.w	r3, r3, #4
 8004cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc4:	4b78      	ldr	r3, [pc, #480]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	4a77      	ldr	r2, [pc, #476]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd0:	e00b      	b.n	8004cea <HAL_RCC_OscConfig+0x32a>
 8004cd2:	4b75      	ldr	r3, [pc, #468]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd6:	4a74      	ldr	r2, [pc, #464]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004cde:	4b72      	ldr	r3, [pc, #456]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce2:	4a71      	ldr	r2, [pc, #452]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d015      	beq.n	8004d1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf2:	f7fc ff0f 	bl	8001b14 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf8:	e00a      	b.n	8004d10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfa:	f7fc ff0b 	bl	8001b14 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e0c5      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d10:	4b65      	ldr	r3, [pc, #404]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0ee      	beq.n	8004cfa <HAL_RCC_OscConfig+0x33a>
 8004d1c:	e014      	b.n	8004d48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d1e:	f7fc fef9 	bl	8001b14 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d24:	e00a      	b.n	8004d3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d26:	f7fc fef5 	bl	8001b14 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e0af      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3c:	4b5a      	ldr	r3, [pc, #360]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1ee      	bne.n	8004d26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d105      	bne.n	8004d5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4e:	4b56      	ldr	r3, [pc, #344]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	4a55      	ldr	r2, [pc, #340]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 809b 	beq.w	8004e9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d64:	4b50      	ldr	r3, [pc, #320]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 030c 	and.w	r3, r3, #12
 8004d6c:	2b08      	cmp	r3, #8
 8004d6e:	d05c      	beq.n	8004e2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d141      	bne.n	8004dfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d78:	4b4c      	ldr	r3, [pc, #304]	; (8004eac <HAL_RCC_OscConfig+0x4ec>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fc fec9 	bl	8001b14 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fc fec5 	bl	8001b14 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e081      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d98:	4b43      	ldr	r3, [pc, #268]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	019b      	lsls	r3, r3, #6
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	085b      	lsrs	r3, r3, #1
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	061b      	lsls	r3, r3, #24
 8004dc8:	4937      	ldr	r1, [pc, #220]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dce:	4b37      	ldr	r3, [pc, #220]	; (8004eac <HAL_RCC_OscConfig+0x4ec>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd4:	f7fc fe9e 	bl	8001b14 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ddc:	f7fc fe9a 	bl	8001b14 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e056      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dee:	4b2e      	ldr	r3, [pc, #184]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x41c>
 8004dfa:	e04e      	b.n	8004e9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dfc:	4b2b      	ldr	r3, [pc, #172]	; (8004eac <HAL_RCC_OscConfig+0x4ec>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e02:	f7fc fe87 	bl	8001b14 <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e0a:	f7fc fe83 	bl	8001b14 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e03f      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1c:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <HAL_RCC_OscConfig+0x44a>
 8004e28:	e037      	b.n	8004e9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e032      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e36:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <HAL_RCC_OscConfig+0x4e8>)
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d028      	beq.n	8004e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d121      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d11a      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e66:	4013      	ands	r3, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d111      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d107      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d001      	beq.n	8004e9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40007000 	.word	0x40007000
 8004ea8:	40023800 	.word	0x40023800
 8004eac:	42470060 	.word	0x42470060

08004eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e0cc      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b68      	ldr	r3, [pc, #416]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d90c      	bls.n	8004eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b65      	ldr	r3, [pc, #404]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	b2d2      	uxtb	r2, r2
 8004ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eda:	4b63      	ldr	r3, [pc, #396]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0b8      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d020      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f04:	4b59      	ldr	r3, [pc, #356]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4a58      	ldr	r2, [pc, #352]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0308 	and.w	r3, r3, #8
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f1c:	4b53      	ldr	r3, [pc, #332]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4a52      	ldr	r2, [pc, #328]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f28:	4b50      	ldr	r3, [pc, #320]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	494d      	ldr	r1, [pc, #308]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d044      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d107      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4e:	4b47      	ldr	r3, [pc, #284]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d119      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e07f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d003      	beq.n	8004f6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f6a:	2b03      	cmp	r3, #3
 8004f6c:	d107      	bne.n	8004f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6e:	4b3f      	ldr	r3, [pc, #252]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e06f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f7e:	4b3b      	ldr	r3, [pc, #236]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e067      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f8e:	4b37      	ldr	r3, [pc, #220]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f023 0203 	bic.w	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4934      	ldr	r1, [pc, #208]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa0:	f7fc fdb8 	bl	8001b14 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fa6:	e00a      	b.n	8004fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fa8:	f7fc fdb4 	bl	8001b14 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e04f      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fbe:	4b2b      	ldr	r3, [pc, #172]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 020c 	and.w	r2, r3, #12
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d1eb      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd0:	4b25      	ldr	r3, [pc, #148]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d20c      	bcs.n	8004ff8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fde:	4b22      	ldr	r3, [pc, #136]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	b2d2      	uxtb	r2, r2
 8004fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fe6:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d001      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e032      	b.n	800505e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d008      	beq.n	8005016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005004:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4916      	ldr	r1, [pc, #88]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	4313      	orrs	r3, r2
 8005014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d009      	beq.n	8005036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005022:	4b12      	ldr	r3, [pc, #72]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	490e      	ldr	r1, [pc, #56]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005036:	f000 f889 	bl	800514c <HAL_RCC_GetSysClockFreq>
 800503a:	4602      	mov	r2, r0
 800503c:	4b0b      	ldr	r3, [pc, #44]	; (800506c <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	091b      	lsrs	r3, r3, #4
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	490a      	ldr	r1, [pc, #40]	; (8005070 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	5ccb      	ldrb	r3, [r1, r3]
 800504a:	fa22 f303 	lsr.w	r3, r2, r3
 800504e:	4a09      	ldr	r2, [pc, #36]	; (8005074 <HAL_RCC_ClockConfig+0x1c4>)
 8005050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005052:	4b09      	ldr	r3, [pc, #36]	; (8005078 <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fc fc46 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023c00 	.word	0x40023c00
 800506c:	40023800 	.word	0x40023800
 8005070:	0802b404 	.word	0x0802b404
 8005074:	20000000 	.word	0x20000000
 8005078:	20000004 	.word	0x20000004

0800507c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08c      	sub	sp, #48	; 0x30
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d129      	bne.n	80050e2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	4b2b      	ldr	r3, [pc, #172]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 8005094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005096:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6313      	str	r3, [r2, #48]	; 0x30
 800509e:	4b28      	ldr	r3, [pc, #160]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	61bb      	str	r3, [r7, #24]
 80050a8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80050aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b0:	2302      	movs	r3, #2
 80050b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050b4:	2303      	movs	r3, #3
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80050bc:	2300      	movs	r3, #0
 80050be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80050c0:	f107 031c 	add.w	r3, r7, #28
 80050c4:	4619      	mov	r1, r3
 80050c6:	481f      	ldr	r0, [pc, #124]	; (8005144 <HAL_RCC_MCOConfig+0xc8>)
 80050c8:	f7fe fe68 	bl	8003d9c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80050d4:	68b9      	ldr	r1, [r7, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	430b      	orrs	r3, r1
 80050da:	4919      	ldr	r1, [pc, #100]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80050e0:	e029      	b.n	8005136 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	4b16      	ldr	r3, [pc, #88]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 80050e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ea:	4a15      	ldr	r2, [pc, #84]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 80050ec:	f043 0304 	orr.w	r3, r3, #4
 80050f0:	6313      	str	r3, [r2, #48]	; 0x30
 80050f2:	4b13      	ldr	r3, [pc, #76]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	617b      	str	r3, [r7, #20]
 80050fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80050fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005104:	2302      	movs	r3, #2
 8005106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005108:	2303      	movs	r3, #3
 800510a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510c:	2300      	movs	r3, #0
 800510e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005110:	2300      	movs	r3, #0
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005114:	f107 031c 	add.w	r3, r7, #28
 8005118:	4619      	mov	r1, r3
 800511a:	480b      	ldr	r0, [pc, #44]	; (8005148 <HAL_RCC_MCOConfig+0xcc>)
 800511c:	f7fe fe3e 	bl	8003d9c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	00d9      	lsls	r1, r3, #3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	430b      	orrs	r3, r1
 8005130:	4903      	ldr	r1, [pc, #12]	; (8005140 <HAL_RCC_MCOConfig+0xc4>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
}
 8005136:	bf00      	nop
 8005138:	3730      	adds	r7, #48	; 0x30
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800
 8005144:	40020000 	.word	0x40020000
 8005148:	40020800 	.word	0x40020800

0800514c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800514c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005150:	b084      	sub	sp, #16
 8005152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	2300      	movs	r3, #0
 800515e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005164:	4b67      	ldr	r3, [pc, #412]	; (8005304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	f003 030c 	and.w	r3, r3, #12
 800516c:	2b08      	cmp	r3, #8
 800516e:	d00d      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x40>
 8005170:	2b08      	cmp	r3, #8
 8005172:	f200 80bd 	bhi.w	80052f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x34>
 800517a:	2b04      	cmp	r3, #4
 800517c:	d003      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x3a>
 800517e:	e0b7      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005180:	4b61      	ldr	r3, [pc, #388]	; (8005308 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005182:	60bb      	str	r3, [r7, #8]
       break;
 8005184:	e0b7      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005186:	4b61      	ldr	r3, [pc, #388]	; (800530c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005188:	60bb      	str	r3, [r7, #8]
      break;
 800518a:	e0b4      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800518c:	4b5d      	ldr	r3, [pc, #372]	; (8005304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005194:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005196:	4b5b      	ldr	r3, [pc, #364]	; (8005304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d04d      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051a2:	4b58      	ldr	r3, [pc, #352]	; (8005304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	461a      	mov	r2, r3
 80051aa:	f04f 0300 	mov.w	r3, #0
 80051ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	ea02 0800 	and.w	r8, r2, r0
 80051ba:	ea03 0901 	and.w	r9, r3, r1
 80051be:	4640      	mov	r0, r8
 80051c0:	4649      	mov	r1, r9
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	014b      	lsls	r3, r1, #5
 80051cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051d0:	0142      	lsls	r2, r0, #5
 80051d2:	4610      	mov	r0, r2
 80051d4:	4619      	mov	r1, r3
 80051d6:	ebb0 0008 	subs.w	r0, r0, r8
 80051da:	eb61 0109 	sbc.w	r1, r1, r9
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	018b      	lsls	r3, r1, #6
 80051e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051ec:	0182      	lsls	r2, r0, #6
 80051ee:	1a12      	subs	r2, r2, r0
 80051f0:	eb63 0301 	sbc.w	r3, r3, r1
 80051f4:	f04f 0000 	mov.w	r0, #0
 80051f8:	f04f 0100 	mov.w	r1, #0
 80051fc:	00d9      	lsls	r1, r3, #3
 80051fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005202:	00d0      	lsls	r0, r2, #3
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	eb12 0208 	adds.w	r2, r2, r8
 800520c:	eb43 0309 	adc.w	r3, r3, r9
 8005210:	f04f 0000 	mov.w	r0, #0
 8005214:	f04f 0100 	mov.w	r1, #0
 8005218:	0259      	lsls	r1, r3, #9
 800521a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800521e:	0250      	lsls	r0, r2, #9
 8005220:	4602      	mov	r2, r0
 8005222:	460b      	mov	r3, r1
 8005224:	4610      	mov	r0, r2
 8005226:	4619      	mov	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	461a      	mov	r2, r3
 800522c:	f04f 0300 	mov.w	r3, #0
 8005230:	f7fa ffca 	bl	80001c8 <__aeabi_uldivmod>
 8005234:	4602      	mov	r2, r0
 8005236:	460b      	mov	r3, r1
 8005238:	4613      	mov	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	e04a      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800523e:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	099b      	lsrs	r3, r3, #6
 8005244:	461a      	mov	r2, r3
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800524e:	f04f 0100 	mov.w	r1, #0
 8005252:	ea02 0400 	and.w	r4, r2, r0
 8005256:	ea03 0501 	and.w	r5, r3, r1
 800525a:	4620      	mov	r0, r4
 800525c:	4629      	mov	r1, r5
 800525e:	f04f 0200 	mov.w	r2, #0
 8005262:	f04f 0300 	mov.w	r3, #0
 8005266:	014b      	lsls	r3, r1, #5
 8005268:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800526c:	0142      	lsls	r2, r0, #5
 800526e:	4610      	mov	r0, r2
 8005270:	4619      	mov	r1, r3
 8005272:	1b00      	subs	r0, r0, r4
 8005274:	eb61 0105 	sbc.w	r1, r1, r5
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	018b      	lsls	r3, r1, #6
 8005282:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005286:	0182      	lsls	r2, r0, #6
 8005288:	1a12      	subs	r2, r2, r0
 800528a:	eb63 0301 	sbc.w	r3, r3, r1
 800528e:	f04f 0000 	mov.w	r0, #0
 8005292:	f04f 0100 	mov.w	r1, #0
 8005296:	00d9      	lsls	r1, r3, #3
 8005298:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800529c:	00d0      	lsls	r0, r2, #3
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	1912      	adds	r2, r2, r4
 80052a4:	eb45 0303 	adc.w	r3, r5, r3
 80052a8:	f04f 0000 	mov.w	r0, #0
 80052ac:	f04f 0100 	mov.w	r1, #0
 80052b0:	0299      	lsls	r1, r3, #10
 80052b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052b6:	0290      	lsls	r0, r2, #10
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4610      	mov	r0, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	461a      	mov	r2, r3
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	f7fa ff7e 	bl	80001c8 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4613      	mov	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052d4:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	0c1b      	lsrs	r3, r3, #16
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	3301      	adds	r3, #1
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ec:	60bb      	str	r3, [r7, #8]
      break;
 80052ee:	e002      	b.n	80052f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052f0:	4b05      	ldr	r3, [pc, #20]	; (8005308 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052f2:	60bb      	str	r3, [r7, #8]
      break;
 80052f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052f6:	68bb      	ldr	r3, [r7, #8]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	00f42400 	.word	0x00f42400
 800530c:	007a1200 	.word	0x007a1200

08005310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005310:	b480      	push	{r7}
 8005312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005314:	4b03      	ldr	r3, [pc, #12]	; (8005324 <HAL_RCC_GetHCLKFreq+0x14>)
 8005316:	681b      	ldr	r3, [r3, #0]
}
 8005318:	4618      	mov	r0, r3
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000000 	.word	0x20000000

08005328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800532c:	f7ff fff0 	bl	8005310 <HAL_RCC_GetHCLKFreq>
 8005330:	4602      	mov	r2, r0
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	0a9b      	lsrs	r3, r3, #10
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	4903      	ldr	r1, [pc, #12]	; (800534c <HAL_RCC_GetPCLK1Freq+0x24>)
 800533e:	5ccb      	ldrb	r3, [r1, r3]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40023800 	.word	0x40023800
 800534c:	0802b414 	.word	0x0802b414

08005350 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	220f      	movs	r2, #15
 800535e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005360:	4b12      	ldr	r3, [pc, #72]	; (80053ac <HAL_RCC_GetClockConfig+0x5c>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 0203 	and.w	r2, r3, #3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800536c:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <HAL_RCC_GetClockConfig+0x5c>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <HAL_RCC_GetClockConfig+0x5c>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005384:	4b09      	ldr	r3, [pc, #36]	; (80053ac <HAL_RCC_GetClockConfig+0x5c>)
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	08db      	lsrs	r3, r3, #3
 800538a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005392:	4b07      	ldr	r3, [pc, #28]	; (80053b0 <HAL_RCC_GetClockConfig+0x60>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0207 	and.w	r2, r3, #7
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	601a      	str	r2, [r3, #0]
}
 800539e:	bf00      	nop
 80053a0:	370c      	adds	r7, #12
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	40023800 	.word	0x40023800
 80053b0:	40023c00 	.word	0x40023c00

080053b4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e034      	b.n	8005434 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d106      	bne.n	80053e4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f7fc fa78 	bl	80018d4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3308      	adds	r3, #8
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 fad2 	bl	8005998 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6818      	ldr	r0, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	461a      	mov	r2, r3
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	f000 fb1c 	bl	8005a3c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6858      	ldr	r0, [r3, #4]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	f000 fb51 	bl	8005ab8 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	6892      	ldr	r2, [r2, #8]
 800541e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	6892      	ldr	r2, [r2, #8]
 800542a:	f041 0101 	orr.w	r1, r1, #1
 800542e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3710      	adds	r7, #16
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e041      	b.n	80054d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d106      	bne.n	8005468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f839 	bl	80054da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3304      	adds	r3, #4
 8005478:	4619      	mov	r1, r3
 800547a:	4610      	mov	r0, r2
 800547c:	f000 f9d8 	bl	8005830 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	d001      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e04e      	b.n	80055a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a23      	ldr	r2, [pc, #140]	; (80055b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d022      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005532:	d01d      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1f      	ldr	r2, [pc, #124]	; (80055b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d018      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a1e      	ldr	r2, [pc, #120]	; (80055bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d013      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a1c      	ldr	r2, [pc, #112]	; (80055c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00e      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d009      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a19      	ldr	r2, [pc, #100]	; (80055c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x80>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <HAL_TIM_Base_Start_IT+0xdc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d111      	bne.n	8005594 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d010      	beq.n	80055a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f042 0201 	orr.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005592:	e007      	b.n	80055a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	40010000 	.word	0x40010000
 80055b8:	40000400 	.word	0x40000400
 80055bc:	40000800 	.word	0x40000800
 80055c0:	40000c00 	.word	0x40000c00
 80055c4:	40010400 	.word	0x40010400
 80055c8:	40014000 	.word	0x40014000
 80055cc:	40001800 	.word	0x40001800

080055d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0302 	and.w	r3, r3, #2
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d122      	bne.n	800562c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0202 	mvn.w	r2, #2
 80055fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f8ee 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f8e0 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8f1 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0304 	and.w	r3, r3, #4
 8005636:	2b04      	cmp	r3, #4
 8005638:	d122      	bne.n	8005680 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0304 	and.w	r3, r3, #4
 8005644:	2b04      	cmp	r3, #4
 8005646:	d11b      	bne.n	8005680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0204 	mvn.w	r2, #4
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2202      	movs	r2, #2
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f8c4 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8b6 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f8c7 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0308 	and.w	r3, r3, #8
 800568a:	2b08      	cmp	r3, #8
 800568c:	d122      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0308 	and.w	r3, r3, #8
 8005698:	2b08      	cmp	r3, #8
 800569a:	d11b      	bne.n	80056d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0208 	mvn.w	r2, #8
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2204      	movs	r2, #4
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f89a 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f88c 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f89d 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	f003 0310 	and.w	r3, r3, #16
 80056de:	2b10      	cmp	r3, #16
 80056e0:	d122      	bne.n	8005728 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b10      	cmp	r3, #16
 80056ee:	d11b      	bne.n	8005728 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f06f 0210 	mvn.w	r2, #16
 80056f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2208      	movs	r2, #8
 80056fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f870 	bl	80057f4 <HAL_TIM_IC_CaptureCallback>
 8005714:	e005      	b.n	8005722 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f862 	bl	80057e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 f873 	bl	8005808 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d10e      	bne.n	8005754 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b01      	cmp	r3, #1
 8005742:	d107      	bne.n	8005754 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f06f 0201 	mvn.w	r2, #1
 800574c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7fb fe1c 	bl	800138c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	d10e      	bne.n	8005780 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800576c:	2b80      	cmp	r3, #128	; 0x80
 800576e:	d107      	bne.n	8005780 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f902 	bl	8005984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d10e      	bne.n	80057ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005798:	2b40      	cmp	r3, #64	; 0x40
 800579a:	d107      	bne.n	80057ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f838 	bl	800581c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f003 0320 	and.w	r3, r3, #32
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	d10e      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b20      	cmp	r3, #32
 80057c6:	d107      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f06f 0220 	mvn.w	r2, #32
 80057d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f8cc 	bl	8005970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057d8:	bf00      	nop
 80057da:	3708      	adds	r7, #8
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a40      	ldr	r2, [pc, #256]	; (8005944 <TIM_Base_SetConfig+0x114>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d013      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584e:	d00f      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a3d      	ldr	r2, [pc, #244]	; (8005948 <TIM_Base_SetConfig+0x118>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d00b      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	4a3c      	ldr	r2, [pc, #240]	; (800594c <TIM_Base_SetConfig+0x11c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d007      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a3b      	ldr	r2, [pc, #236]	; (8005950 <TIM_Base_SetConfig+0x120>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d003      	beq.n	8005870 <TIM_Base_SetConfig+0x40>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a3a      	ldr	r2, [pc, #232]	; (8005954 <TIM_Base_SetConfig+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d108      	bne.n	8005882 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005876:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <TIM_Base_SetConfig+0x114>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d02b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d027      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a2c      	ldr	r2, [pc, #176]	; (8005948 <TIM_Base_SetConfig+0x118>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d023      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a2b      	ldr	r2, [pc, #172]	; (800594c <TIM_Base_SetConfig+0x11c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01f      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a2a      	ldr	r2, [pc, #168]	; (8005950 <TIM_Base_SetConfig+0x120>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d01b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a29      	ldr	r2, [pc, #164]	; (8005954 <TIM_Base_SetConfig+0x124>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d017      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a28      	ldr	r2, [pc, #160]	; (8005958 <TIM_Base_SetConfig+0x128>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d013      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a27      	ldr	r2, [pc, #156]	; (800595c <TIM_Base_SetConfig+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d00f      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a26      	ldr	r2, [pc, #152]	; (8005960 <TIM_Base_SetConfig+0x130>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00b      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a25      	ldr	r2, [pc, #148]	; (8005964 <TIM_Base_SetConfig+0x134>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d007      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a24      	ldr	r2, [pc, #144]	; (8005968 <TIM_Base_SetConfig+0x138>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <TIM_Base_SetConfig+0x13c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d108      	bne.n	80058f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <TIM_Base_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d003      	beq.n	8005928 <TIM_Base_SetConfig+0xf8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <TIM_Base_SetConfig+0x124>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d103      	bne.n	8005930 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	615a      	str	r2, [r3, #20]
}
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	40010000 	.word	0x40010000
 8005948:	40000400 	.word	0x40000400
 800594c:	40000800 	.word	0x40000800
 8005950:	40000c00 	.word	0x40000c00
 8005954:	40010400 	.word	0x40010400
 8005958:	40014000 	.word	0x40014000
 800595c:	40014400 	.word	0x40014400
 8005960:	40014800 	.word	0x40014800
 8005964:	40001800 	.word	0x40001800
 8005968:	40001c00 	.word	0x40001c00
 800596c:	40002000 	.word	0x40002000

08005970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059b0:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	4b20      	ldr	r3, [pc, #128]	; (8005a38 <FSMC_NORSRAM_Init+0xa0>)
 80059b6:	4013      	ands	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80059c2:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80059c8:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80059ce:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80059d4:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80059da:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80059e0:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80059e6:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80059ec:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80059f2:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80059f8:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80059fe:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8005a04:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d103      	bne.n	8005a1c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a1a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	fff00080 	.word	0xfff00080

08005a3c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005a5e:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005a6a:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8005a72:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8005a7a:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	691b      	ldr	r3, [r3, #16]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005a84:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	3b02      	subs	r3, #2
 8005a8c:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8005a8e:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005a94:	4313      	orrs	r3, r2
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6979      	ldr	r1, [r7, #20]
 8005aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
	...

08005ab8 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ad0:	d122      	bne.n	8005b18 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ada:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4b15      	ldr	r3, [pc, #84]	; (8005b34 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005aee:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8005af6:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8005afe:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8005b04:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005b16:	e005      	b.n	8005b24 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	cff00000 	.word	0xcff00000

08005b38 <__libc_init_array>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	4d0d      	ldr	r5, [pc, #52]	; (8005b70 <__libc_init_array+0x38>)
 8005b3c:	4c0d      	ldr	r4, [pc, #52]	; (8005b74 <__libc_init_array+0x3c>)
 8005b3e:	1b64      	subs	r4, r4, r5
 8005b40:	10a4      	asrs	r4, r4, #2
 8005b42:	2600      	movs	r6, #0
 8005b44:	42a6      	cmp	r6, r4
 8005b46:	d109      	bne.n	8005b5c <__libc_init_array+0x24>
 8005b48:	4d0b      	ldr	r5, [pc, #44]	; (8005b78 <__libc_init_array+0x40>)
 8005b4a:	4c0c      	ldr	r4, [pc, #48]	; (8005b7c <__libc_init_array+0x44>)
 8005b4c:	f000 f820 	bl	8005b90 <_init>
 8005b50:	1b64      	subs	r4, r4, r5
 8005b52:	10a4      	asrs	r4, r4, #2
 8005b54:	2600      	movs	r6, #0
 8005b56:	42a6      	cmp	r6, r4
 8005b58:	d105      	bne.n	8005b66 <__libc_init_array+0x2e>
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b60:	4798      	blx	r3
 8005b62:	3601      	adds	r6, #1
 8005b64:	e7ee      	b.n	8005b44 <__libc_init_array+0xc>
 8005b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b6a:	4798      	blx	r3
 8005b6c:	3601      	adds	r6, #1
 8005b6e:	e7f2      	b.n	8005b56 <__libc_init_array+0x1e>
 8005b70:	0802b42c 	.word	0x0802b42c
 8005b74:	0802b42c 	.word	0x0802b42c
 8005b78:	0802b42c 	.word	0x0802b42c
 8005b7c:	0802b430 	.word	0x0802b430

08005b80 <memset>:
 8005b80:	4402      	add	r2, r0
 8005b82:	4603      	mov	r3, r0
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d100      	bne.n	8005b8a <memset+0xa>
 8005b88:	4770      	bx	lr
 8005b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b8e:	e7f9      	b.n	8005b84 <memset+0x4>

08005b90 <_init>:
 8005b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b92:	bf00      	nop
 8005b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b96:	bc08      	pop	{r3}
 8005b98:	469e      	mov	lr, r3
 8005b9a:	4770      	bx	lr

08005b9c <_fini>:
 8005b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9e:	bf00      	nop
 8005ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ba2:	bc08      	pop	{r3}
 8005ba4:	469e      	mov	lr, r3
 8005ba6:	4770      	bx	lr
